{
    "pipes": [],
    "interfaces": [
        {
            "name": "IConfig",
            "id": "interface-IConfig-71a4f711b7d21febd7b31a2390e9d119acf55a977f57ede1b9b9c23ad756b9211318f960833eebb76f6e8a24d47cc29ed4e247f820bdd7665ebcebe853bc6032",
            "file": "projects/onlyoffice/document-editor-angular/src/lib/model/config.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IConfig {\n  documentType?: string;\n  height?: string;\n  token?: string;\n  type?: string;\n  width?: string;\n  document?: {\n    fileType: string;\n    key: string;\n    referenceData?: {\n      fileKey: string,\n      instanceId: string,\n      key: string,\n    }\n    title: string;\n    url: string;\n    info?: {\n      owner?: string;\n      uploaded?: string;\n      favorite?: boolean;\n      folder?: string;\n      sharingSettings?: any[];\n    };\n    permissions?: {\n      /**\n       * @deprecated Deprecated since version 5.5, please add the onRequestRestore field instead.\n       */\n      changeHistory?: boolean;\n      chat?: boolean;\n      comment?: boolean;\n      commentGroups?: any;\n      copy?: boolean;\n      deleteCommentAuthorOnly?: boolean;\n      download?: boolean;\n      edit?: boolean;\n      editCommentAuthorOnly?: boolean;\n      fillForms?: boolean;\n      modifyContentControl?: boolean;\n      modifyFilter?: boolean;\n      print?: boolean;\n      protect?: boolean;\n      /**\n       * @deprecated Deprecated since version 6.0, please add the onRequestRename field instead.\n       */\n      rename?: boolean;\n      review?: boolean;\n      reviewGroups?: string[];\n      userInfoGroups?: string[];\n    };\n  };\n  editorConfig?: {\n    actionLink?: any;\n    callbackUrl?: string;\n    coEditing?: {\n      mode: string;\n      change: boolean;\n    };\n    createUrl?: string;\n    lang?: string;\n    location?: string;\n    mode?: string;\n    recent?: any[];\n    region?: string;\n    templates?: any[];\n    user?: {\n      /**\n       * @deprecated Deprecated since version 4.2, please use name instead.\n       */\n      firstname?: string;\n      group?: string;\n      id?: string;\n      image?: string;\n      /**\n       * @deprecated Deprecated since version 4.2, please use name instead.\n       */\n      lastname?: string;\n      name?: string;\n    };\n    customization?: {\n      anonymous?: {\n        request?: boolean;\n        label?: string;\n      };\n      autosave?: boolean;\n      /**\n       * @deprecated Deprecated since version 7.1, please use the document.permissions.chat parameter instead.\n       */\n      chat?: boolean;\n      /**\n       * @deprecated Deprecated since version 6.3, please use the document.permissions.editCommentAuthorOnly and document.permissions.deleteCommentAuthorOnly fields instead.\n       */\n      commentAuthorOnly?: boolean;\n      comments?: boolean;\n      compactHeader?: boolean;\n      compactToolbar?: boolean;\n      compatibleFeatures?: boolean;\n      customer?: {\n        address?: string;\n        info?: string;\n        logo?: string;\n        logoDark?: string;\n        mail?: string;\n        name?: string;\n        phone?: string;\n        www?: string;\n      };\n      features?: any;\n      feedback?: any;\n      forcesave?: boolean;\n      goback?: any;\n      help?: boolean;\n      hideNotes?: boolean;\n      hideRightMenu?: boolean;\n      hideRulers?: boolean;\n      integrationMode?: string;\n      logo?: {\n        image?: string;\n        imageDark?: string;\n        imageEmbedded?: string;\n        url?: string;\n      };\n      macros?: boolean;\n      macrosMode?: string;\n      mentionShare?: boolean;\n      mobileForceView?: boolean;\n      plugins?: boolean;\n      review?: {\n        hideReviewDisplay?: boolean;\n        hoverMode?: boolean;\n        reviewDisplay?: string;\n        showReviewChanges?: boolean;\n        trackChanges?: boolean;\n      };\n      /**\n       * @deprecated Deprecated since version 7.0. Please use the review.reviewDisplay parameter instead.\n       */\n      reviewDisplay?: string;\n      /**\n       * @deprecated Deprecated since version 7.0. Please use the review.showReviewChanges parameter instead.\n       */\n      showReviewChanges?: boolean;\n      /**\n       * @deprecated Deprecated since version 7.1. Please use the features.spellcheck parameter instead.\n       */\n      spellcheck?: boolean;\n      submitForm?: boolean;\n      toolbarHideFileName?: boolean;\n      toolbarNoTabs?: boolean;\n      /**\n       * @deprecated Deprecated since version 7.0. Please use the review.trackChanges parameter instead.\n       */\n      trackChanges?: boolean;\n      uiTheme?: string;\n      unit?: string;\n      zoom?: number;\n    };\n    embedded?: {\n      embedUrl?: string;\n      fullscreenUrl?: string;\n      saveUrl?: string;\n      shareUrl?: string;\n      toolbarDocked?: string;\n    };\n    plugins?: {\n      autostart?: string[];\n      pluginsData?: string[];\n      /**\n       * @deprecated Deprecated since version 4.3, please use the absolute URLs in pluginsData field.\n       */\n      url?: string;\n    };\n  };\n  events?: {\n    onAppReady?: (event: object) => void;\n    onCollaborativeChanges?: (event: object) => void;\n    onDocumentReady?: (event: object) => void;\n    onDocumentStateChange?: (event: object) => void;\n    onDownloadAs?: (event: object) => void;\n    onError?: (event: object) => void;\n    onInfo?: (event: object) => void;\n    onMetaChange?: (event: object) => void;\n    onMakeActionLink?: (event: object) => void;\n    onOutdatedVersion?: (event: object) => void;\n    onPluginsReady?: (event: object) => void;\n    onReady?: (event: object) => void;\n    onRequestClose?: (event: object) => void;\n    /**\n     * @deprecated Deprecated since version 7.5, please use onRequestSelectDocument instead\n     */\n    onRequestCompareFile?: (event: object) => void;\n    onRequestCreateNew?: (event: object) => void;\n    onRequestEditRights?: (event: object) => void;\n    onRequestHistory?: (event: object) => void;\n    onRequestHistoryClose?: (event: object) => void;\n    onRequestHistoryData?: (event: object) => void;\n    onRequestInsertImage?: (event: object) => void;\n    /**\n     * @deprecated Deprecated since version 7.5, please use onRequestSelectSpreadsheet instead\n     */\n    onRequestMailMergeRecipients?: (event: object) => void;\n    onRequestOpen?: (event: object) => void;\n    onRequestReferenceData?: (event: object) => void;\n    onRequestReferenceSource?: (event: object) => void;\n    onRequestRename?: (event: object) => void;\n    onRequestRestore?: (event: object) => void;\n    onRequestSaveAs?: (event: object) => void;\n    onRequestSelectDocument?: (event: object) => void;\n    onRequestSelectSpreadsheet?: (event: object) => void;\n    onRequestSendNotify?: (event: object) => void;\n    onRequestSharingSettings?: (event: object) => void;\n    onRequestUsers?: (event: object) => void;\n    onWarning?: (event: object) => void;\n  };\n}\n",
            "properties": [
                {
                    "name": "document",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "documentType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "editorConfig",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "events",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 189
                },
                {
                    "name": "height",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "token",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "width",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 22
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IPerson",
            "id": "interface-IPerson-93bfcb00aded3a25556ca3ba48e0a48929780595560bc25484ed42d933a77f532cb5aeda589f3b8e23188bca5a431556c36dd89a4cd70af8a464b45e38cfe0ad",
            "file": "src/app/model/person.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IPerson {\n  label: string;\n  value?: any;\n}",
            "properties": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Window",
            "id": "interface-Window-30fe7c48cd0b5888af7fd4d0b0787875c9567ae1a895161107efade1a97b48290fc845c2758bfc2ade1f624ab316f7892180f9cb9c06e7fdc05d47a95ad489f6",
            "file": "projects/onlyoffice/document-editor-angular/src/lib/components/document-editor.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input, OnInit, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';\nimport { IConfig } from '../model/config';\nimport loadScript from \"../utils/loadScript\";\nimport { cloneDeep } from 'lodash';\n\ndeclare global {\n  interface Window {\n      DocsAPI?: any;\n      DocEditor?: any;\n  }\n}\n\n@Component({\n  selector: 'document-editor',\n  template: '<div [id]=\"id\"></div>',\n  styles: [\n  ]\n})\nexport class DocumentEditorComponent implements OnInit, OnChanges, OnDestroy {\n  @Input() id: string;\n  @Input() documentServerUrl: string;\n  @Input() config: IConfig;\n\n  @Input() document_fileType?: string;\n  @Input() document_title?: string;\n  @Input() documentType?: string;\n  @Input() editorConfig_lang?: string;\n  @Input() height?: string;\n  @Input() type?: string;\n  @Input() width?: string;\n\n  @Input() onLoadComponentError?: (errorCode: number, errorDescription: string) => void;\n\n  @Input() events_onAppReady?: (event: object) => void;\n  @Input() events_onDocumentStateChange?: (event: object) => void;\n  @Input() events_onMetaChange?: (event: object) => void;\n  @Input() events_onDocumentReady?: (event: object) => void;\n  @Input() events_onInfo?: (event: object) => void;\n  @Input() events_onWarning?: (event: object) => void;\n  @Input() events_onError?: (event: object) => void;\n  @Input() events_onRequestSharingSettings?: (event: object) => void;\n  @Input() events_onRequestRename?: (event: object) => void;\n  @Input() events_onMakeActionLink?: (event: object) => void;\n  @Input() events_onRequestInsertImage?: (event: object) => void;\n  @Input() events_onRequestSaveAs?: (event: object) => void;\n  /**\n   * @deprecated Deprecated since version 7.5, please use events_onRequestSelectSpreadsheet instead.\n   */\n  @Input() events_onRequestMailMergeRecipients?: (event: object) => void;\n  /**\n   * @deprecated Deprecated since version 7.5, please use events_onRequestSelectDocument instead.\n   */\n  @Input() events_onRequestCompareFile?: (event: object) => void;\n  @Input() events_onRequestEditRights?: (event: object) => void;\n  @Input() events_onRequestHistory?: (event: object) => void;\n  @Input() events_onRequestHistoryClose?: (event: object) => void;\n  @Input() events_onRequestHistoryData?: (event: object) => void;\n  @Input() events_onRequestRestore?: (event: object) => void;\n  @Input() events_onRequestSelectSpreadsheet?: (event: object) => void;\n  @Input() events_onRequestSelectDocument?: (event: object) => void;\n  @Input() events_onRequestUsers?: (event: object) => void;\n\n  isFirstOnChanges: boolean = true;\n\n  constructor() { }\n\n  ngOnInit(): void {\n    let url = this.documentServerUrl;\n    if (!url.endsWith(\"/\")) url += \"/\";\n\n    const docApiUrl = `${url}web-apps/apps/api/documents/api.js`;\n    loadScript(docApiUrl, \"onlyoffice-api-script\")\n      .then(() => this.onLoad())\n      .catch((err) => {\n        this.onError(-2);\n      });\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const listNameChanges = [\"config\", \"document_fileType\", \"document_title\", \"documentType\", \"editorConfig_lang\", \"height\", \"type\", \"width\"];\n\n    if (this.isFirstOnChanges) {\n      this.isFirstOnChanges = false;\n      return;\n    }\n\n    for (const name of listNameChanges) {\n      if (changes.hasOwnProperty(name)) {\n        if (window?.DocEditor?.instances[this.id]) {\n          window.DocEditor.instances[this.id].destroyEditor();\n          window.DocEditor.instances[this.id] = undefined;\n    \n          console.log(\"Important props have been changed. Load new Editor.\");\n          this.onLoad();\n          return;\n        }\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (window?.DocEditor?.instances[this.id]) {\n      window.DocEditor.instances[this.id].destroyEditor();\n      window.DocEditor.instances[this.id] = undefined;\n    }\n  }\n\n  onLoad = () => {\n    try {\n      if (!window.DocsAPI) this.onError(-3);\n      if (window?.DocEditor?.instances[this.id]) {\n        console.log(\"Skip loading. Instance already exists\", this.id);\n        return;\n      }\n\n      if (!window?.DocEditor?.instances) {\n        window.DocEditor = { instances: {} };\n      }\n\n      var cloneConfig = cloneDeep(this.config);\n\n      var propsConfig: any = {\n        documentType: this.documentType,\n        events: {\n          onAppReady: this.onAppReady,\n          onDocumentStateChange: this.events_onDocumentStateChange,\n          onMetaChange: this.events_onMetaChange,\n          onDocumentReady: this.events_onDocumentReady,\n          onInfo: this.events_onInfo,\n          onWarning: this.events_onWarning,\n          onError: this.events_onError,\n          onRequestSharingSettings: this.events_onRequestSharingSettings,\n          onRequestRename: this.events_onRequestRename,\n          onMakeActionLink: this.events_onMakeActionLink,\n          onRequestInsertImage: this.events_onRequestInsertImage,\n          onRequestSaveAs: this.events_onRequestSaveAs,\n          onRequestMailMergeRecipients: this.events_onRequestMailMergeRecipients,\n          onRequestCompareFile: this.events_onRequestCompareFile,\n          onRequestEditRights: this.events_onRequestEditRights,\n          onRequestHistory: this.events_onRequestHistory,\n          onRequestHistoryClose: this.events_onRequestHistoryClose,\n          onRequestHistoryData: this.events_onRequestHistoryData,\n          onRequestRestore: this.events_onRequestRestore,\n          onRequestSelectSpreadsheet: this.events_onRequestSelectSpreadsheet,\n          onRequestSelectDocument: this.events_onRequestSelectDocument,\n          onRequestUsers: this.events_onRequestUsers\n        },\n        height: this.height,\n        type: this.type,\n        width: this.width,\n      };\n\n      const document = this.getDocument();\n      const editorConfig = this.getEditorConfig();\n\n      if (document !== null) {\n        propsConfig.document = document;\n      }\n\n      if (editorConfig !== null) {\n        propsConfig.editorConfig = editorConfig;\n      }\n\n      let initConfig = Object.assign(propsConfig, cloneConfig || {});\n\n      const editor = window.DocsAPI.DocEditor(this.id, initConfig);\n      window.DocEditor.instances[this.id] = editor;\n    } catch (err: any) {\n      console.error(err);\n      this.onError(-1);\n    }\n  };\n\n  getDocument = () => {\n    var document: any = null;\n\n    if (this.document_fileType) {\n      document = document || {};\n      document.fileType = this.document_fileType;\n    }\n\n    if (this.document_title) {\n      document = document || {};\n      document.document_title = this.document_title;\n    }\n\n    return document;\n  }\n\n  getEditorConfig = () => {\n    var editorConfig: any = null;\n\n    if (this.editorConfig_lang) {\n      editorConfig = editorConfig || {};\n      editorConfig.lang = this.editorConfig_lang;\n    }\n\n    return editorConfig;\n  }\n\n  onError = (errorCode: number) => {\n    let message;\n\n    switch(errorCode) {\n      case -2:\n        message = \"Error load DocsAPI from \" + this.documentServerUrl;\n        break;\n      case -3:\n        message = \"DocsAPI is not defined\";\n        break;\n      default:\n        message = \"Unknown error loading component\";\n        errorCode = -1;\n    }\n\n    if (typeof this.onLoadComponentError == \"undefined\") {\n      console.error(message);\n    } else {\n      this.onLoadComponentError(errorCode, message);\n    }\n  }\n\n  onAppReady() {\n    this.events_onAppReady!(window.DocEditor.instances[this.id]);\n  }\n}\n",
            "properties": [
                {
                    "name": "DocEditor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "DocsAPI",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 24
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "FormsService",
            "id": "injectable-FormsService-3c767e9e3097cfea9bdfe8bc1bfe20b625c4c9990c4d3ded07d32f2421cbea4c75cf46cef0c39a4171434aa89250d206c453210a30c0435a955a11bda28d83a9",
            "file": "src/app/service/forms.service.ts",
            "properties": [
                {
                    "name": "forms",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methods": [
                {
                    "name": "getForms",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {Injectable} from '@angular/core'\nimport {HttpClient} from '@angular/common/http'\nimport {catchError, Observable, tap, throwError} from 'rxjs'\nimport config from \"../../../config/config.json\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FormsService {\n  constructor(\n    private http: HttpClient\n  ) {\n  }\n\n  forms: any[] = [];\n\n  getForms(): Observable<any> {\n    return this.http.get<any>(config.oformsUrl).pipe(\n      tap(response => {\n          var fileOforms = response.data.map((item: { attributes: { file_oform: { data: any[] } } }) => {\n              return item.attributes.file_oform.data.find((f) => f.attributes.ext === \".pdf\");\n          });\n\n          var forms = fileOforms.map((form: { attributes: { url: any; name: any } }) => {\n            return form && form.attributes\n              ? { value: { title:form.attributes.name, url: form.attributes.url }, label: form.attributes.name }\n              : null;\n          }).filter((o: any) => o != null);\n\n        this.forms = forms;\n      }),\n      catchError(error => throwError(() => error.message))\n    )\n  }\n}",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AddCommentComponent",
            "id": "component-AddCommentComponent-a5ca798eeeb8ce5d645c05fdfe683d1608a96f20270c1fb24e0c3f486460e58b091f6251a496439afe0e8abdc5f4941bb8274fba8e4d773ec08041f883d3e0db",
            "file": "src/app/components/comments/add-comment/add-comment.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "add-comment",
            "styleUrls": [
                "../comments.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./add-comment.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "connector",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "userName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "comment",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "addComment",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getValue",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input} from '@angular/core'\n\n@Component({\n  selector: 'add-comment',\n  templateUrl: './add-comment.component.html',\n  styleUrls: ['../comments.component.css']\n})\nexport class AddCommentComponent {\n  @Input() connector: any;\n  @Input() userName: string;\n\n  comment=\"\";\n\n  getValue(event: Event): string {\n    return (event.target as HTMLInputElement).value;\n  }\n\n  addComment () {\n    if(Boolean(this.comment)) {\n      var currentdate = Date.now(); \n      var datetime = \"\" + currentdate;\n\n      this.connector.executeMethod(\"AddComment\",[{Text: this.comment, UserName: this.userName, Time: datetime}]);\n      this.comment = \"\";\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "#blockComments{\n  margin: 5px;\n  display: inline-block;\n  width: 306px;\n}\n\n.comment-div {\n  position: relative;\n  border-radius: 5px;\n  border: 2px solid #000;\n  margin: 5px;\n  text-align: right;\n}\n\n.comment-span{\n  display: block;\n  margin: 3px;\n  text-align: left;\n}\n\n\n.comment-del-div {\n  position: absolute;\n  margin-top: 3px;\n  margin-right: 5px;\n  right: 0;\n} \n\n.comment-del {\n  display: inline-flex;\n  width: 1rem;\n  height: 1rem;\n  position: relative;\n  cursor: pointer;\n}\n\n.comment-del::before,\n.comment-del::after {\n  content: '';\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  width: 1rem;\n  height: .1rem;\n  background-color: #f00;\n  margin: -.05rem 0 0 -.4rem;\n  transform: rotate(-45deg);\n  border-radius: .1rem;\n}\n\n.comment-del::after {\n  transform: rotate(45deg);\n}\n\n.comment-replies{\n  padding-left: 24px;\n  margin-left: 7px;\n  box-sizing: border-box;\n  background-image: url(reply.svg);\n  background-size: 22px;\n  background-repeat: no-repeat;\n}\n\ntextarea {\n  width: 300px;\n  min-height: 100px;\n}\n\niframe {\n  display: inline-block;\n}",
                    "styleUrl": "../comments.component.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div [style.textAlign]=\"'right'\">\n  <span [style.display]=\"'block'\" [style.textAlign]=\"'left'\">Enter your comment:</span>\n  <textarea [value]=\"comment\" (change)=\"comment=getValue($event)\"></textarea>\n\n  <button (click)=\"addComment()\">Send</button>\n</div>"
        },
        {
            "name": "AddCommentReplyComponent",
            "id": "component-AddCommentReplyComponent-4a7d3ccd1f78e9018a4731526d615a2b61c8d03f782bcb536a48d1b81ea00f95030a0fa779ecab991da781010c7ef5888ddd7942d26b8198ca62e9c2967ed5c5",
            "file": "src/app/components/comments/add-comment-reply/add-comment-reply.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "add-comment-reply",
            "styleUrls": [
                "../comments.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./add-comment-reply.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "comment",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "connector",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "userName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "reply",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "showAddReply",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "addReply",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getValue",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input} from '@angular/core'\n\n@Component({\n  selector: 'add-comment-reply',\n  templateUrl: './add-comment-reply.component.html',\n  styleUrls: ['../comments.component.css']\n})\nexport class AddCommentReplyComponent {\n  @Input() connector: any;\n  @Input() userName: string;\n  @Input() comment: any;\n\n  reply = \"\";\n  showAddReply = false;\n\n  getValue(event: Event): string {\n    return (event.target as HTMLInputElement).value;\n  }\n\n  addReply () {\n    if (Boolean(this.reply)) {\n      var currentdate = Date.now(); \n      var datetime = \"\" + currentdate;\n\n      this.comment[\"Data\"][\"Replies\"].push({ Text: this.reply, Time: datetime, UserName: this.userName });\n\n      this.connector.executeMethod(\"ChangeComment\", [this.comment[\"Id\"], this.comment[\"Data\"]]);\n\n      this.reply = \"\";\n      this.showAddReply = false;\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "#blockComments{\n  margin: 5px;\n  display: inline-block;\n  width: 306px;\n}\n\n.comment-div {\n  position: relative;\n  border-radius: 5px;\n  border: 2px solid #000;\n  margin: 5px;\n  text-align: right;\n}\n\n.comment-span{\n  display: block;\n  margin: 3px;\n  text-align: left;\n}\n\n\n.comment-del-div {\n  position: absolute;\n  margin-top: 3px;\n  margin-right: 5px;\n  right: 0;\n} \n\n.comment-del {\n  display: inline-flex;\n  width: 1rem;\n  height: 1rem;\n  position: relative;\n  cursor: pointer;\n}\n\n.comment-del::before,\n.comment-del::after {\n  content: '';\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  width: 1rem;\n  height: .1rem;\n  background-color: #f00;\n  margin: -.05rem 0 0 -.4rem;\n  transform: rotate(-45deg);\n  border-radius: .1rem;\n}\n\n.comment-del::after {\n  transform: rotate(45deg);\n}\n\n.comment-replies{\n  padding-left: 24px;\n  margin-left: 7px;\n  box-sizing: border-box;\n  background-image: url(reply.svg);\n  background-size: 22px;\n  background-repeat: no-repeat;\n}\n\ntextarea {\n  width: 300px;\n  min-height: 100px;\n}\n\niframe {\n  display: inline-block;\n}",
                    "styleUrl": "../comments.component.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div *ngIf=\"showAddReply\">\n  <textarea [style.width]=\"'270px'\" [style.marginRight]=\"'8px'\" [value]=\"reply\" (change)=\"reply=getValue($event)\"></textarea>\n  <button (click)=\"addReply()\">Add</button>\n  <button (click)=\"showAddReply = false\">Cancel</button>\n</div>\n\n<button *ngIf=\"!showAddReply\" (click)=\"showAddReply = true\">Add reply</button>"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-46ff9b7f8ada6e05000fa0a587c4f5e3ef3dbf6accdfbc20037d5c8eda49ac43771019a8b8901b7313e45e3efda3f6d42ec54b775928868a34ff33cbd0affcaf",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "comments",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "config",
                    "defaultValue": "{\n    document: {\n        fileType: \"docx\",\n        title: \"demo.docx\",\n        url: config.demoStorage + \"demo.docx\",\n        key: \"712027760_embedded\"\n    },\n    documentType: \"word\",\n    editorConfig: {\n      mode: \"edit\",\n      user: {\n        id: \"uid-1\",\n        name: \"John Smith\",\n        },\n      },\n    height:\"600px\",\n    width:\"70%\"\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IConfig",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "connector",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "onDocumentReady",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "title",
                    "defaultValue": "'document-editor-angular-workspace'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { IConfig } from '@onlyoffice/document-editor-angular';\nimport config from \"./../../config/config.json\";\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html'\n})\nexport class AppComponent {\n  title = 'document-editor-angular-workspace';\n  comments: any[] = [];\n  connector: any = null;\n\n  onDocumentReady = () => {\n    var editor = window.DocEditor.instances[\"docxForComments\"];\n    this.connector = editor.createConnector();\n    this.connector.executeMethod(\"GetAllComments\", null, function(data: any) {\n      let commentsRevers: any[] = [];\n      for (var i = 0; i < data.length; i++){\n        commentsRevers[i] = data[(data.length - 1) - i];\n      }\n      this.comments = commentsRevers;\n    }.bind(this));\n  };\n\n  config: IConfig = {\n    document: {\n        fileType: \"docx\",\n        title: \"demo.docx\",\n        url: config.demoStorage + \"demo.docx\",\n        key: \"712027760_embedded\"\n    },\n    documentType: \"word\",\n    editorConfig: {\n      mode: \"edit\",\n      user: {\n        id: \"uid-1\",\n        name: \"John Smith\",\n        },\n      },\n    height:\"600px\",\n    width:\"70%\"\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "\n<comments userName=\"John Smith\" [comments]=\"comments\" [connector]=\"connector\"></comments>\n\n<document-editor \n  id=\"docxForComments\" \n  documentServerUrl=\"http://documentserver/\"\n  [config]=\"config\"\n  [events_onDocumentReady]=\"onDocumentReady\"\n  height=\"600px\"\n  width=\"70%\"\n></document-editor>"
        },
        {
            "name": "CommenstStoriesComponent",
            "id": "component-CommenstStoriesComponent-68c62a91dfadd8b509df66630e339284c6fd2024f3fe978dadaf807bd40e365ed181c248b004237fb969fc590b857383f3f734afbf7050f524555c6d7c5dfa25",
            "file": "src/app/components/comments/comments-stories/commenst-stories.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "comments-stories",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./comments-stories.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "IConfig",
                    "decorators": []
                },
                {
                    "name": "documentServerUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "editorId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "userName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "comments",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "connector",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "onDocumentReady",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { IConfig } from '@onlyoffice/document-editor-angular';\n\n@Component({\n  selector: 'comments-stories',\n  templateUrl: './comments-stories.component.html'\n})\nexport class CommenstStoriesComponent {\n  @Input() editorId: string;\n  @Input() userName: string;\n  @Input() documentServerUrl: string;\n  @Input() config: IConfig;\n\n  comments: any[] = [];\n  connector: any = null;\n\n  onDocumentReady = () => {\n    var editor = window.DocEditor.instances[\"docxForComments\"];\n    this.connector = editor.createConnector();\n    this.connector.executeMethod(\"GetAllComments\", null, function(data: any) {\n      let commentsRevers: any[] = [];\n      for (var i = 0; i < data.length; i++){\n        commentsRevers[i] = data[(data.length - 1) - i];\n      }\n      this.comments = commentsRevers;\n    }.bind(this));\n  };\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<comments [userName]=\"userName\" [comments]=\"comments\" [connector]=\"connector\"></comments>\n\n<document-editor \n  [id]=\"editorId\" \n  [documentServerUrl]=\"documentServerUrl\"\n  [config]=\"config\"\n  [events_onDocumentReady]=\"onDocumentReady\"\n></document-editor>"
        },
        {
            "name": "CommentsComponent",
            "id": "component-CommentsComponent-2ba5b7ea3049ef38adfd048237a0e73f00445dddf1f1556843b80b0335d629bf38dd520bd65631fbf075a7e28474a25fb4579968c81cadf12c042e7e038a5bf3",
            "file": "src/app/components/comments/comments.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "comments",
            "styleUrls": [
                "./comments.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./comments.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "comments",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "any[]",
                    "decorators": []
                },
                {
                    "name": "connector",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "userName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input} from '@angular/core'\n\n@Component({\n  selector: 'comments',\n  templateUrl: './comments.component.html',\n  styleUrls: ['./comments.component.css']\n})\nexport class CommentsComponent {\n  @Input() userName: string;\n  @Input() comments: any[];\n  @Input() connector: any;\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "#blockComments{\n  margin: 5px;\n  display: inline-block;\n  width: 306px;\n}\n\n.comment-div {\n  position: relative;\n  border-radius: 5px;\n  border: 2px solid #000;\n  margin: 5px;\n  text-align: right;\n}\n\n.comment-span{\n  display: block;\n  margin: 3px;\n  text-align: left;\n}\n\n\n.comment-del-div {\n  position: absolute;\n  margin-top: 3px;\n  margin-right: 5px;\n  right: 0;\n} \n\n.comment-del {\n  display: inline-flex;\n  width: 1rem;\n  height: 1rem;\n  position: relative;\n  cursor: pointer;\n}\n\n.comment-del::before,\n.comment-del::after {\n  content: '';\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  width: 1rem;\n  height: .1rem;\n  background-color: #f00;\n  margin: -.05rem 0 0 -.4rem;\n  transform: rotate(-45deg);\n  border-radius: .1rem;\n}\n\n.comment-del::after {\n  transform: rotate(45deg);\n}\n\n.comment-replies{\n  padding-left: 24px;\n  margin-left: 7px;\n  box-sizing: border-box;\n  background-image: url(reply.svg);\n  background-size: 22px;\n  background-repeat: no-repeat;\n}\n\ntextarea {\n  width: 300px;\n  min-height: 100px;\n}\n\niframe {\n  display: inline-block;\n}",
                    "styleUrl": "./comments.component.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div id=\"blockComments\">\n  <h3 [style.textAlign]=\"'left'\">Comments</h3>\n  <add-comment [connector]=\"connector\" [userName]=\"userName\"></add-comment>\n  <list-comments [connector]=\"connector\" [userName]=\"userName\" [comments]=\"comments\"></list-comments>\n</div>"
        },
        {
            "name": "ContentControlsComponent",
            "id": "component-ContentControlsComponent-6877ce0785e431933c7fda81d443ccfc2dfe06e8e0e29b6a71ecc6fe88321514ceff181f5bf16c607c2506712ab752e96b4ae1ddfe9a0bfaf04482456fc09183",
            "file": "src/app/components/content-controls/content-controls.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "content-controls",
            "styleUrls": [
                "./content-controls.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./content-controls.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "contentControls",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "any[]",
                    "decorators": []
                },
                {
                    "name": "selectedOption",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "setFormValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "function",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "selectedOptionChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "copyContentControls",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "onChangeSelectedOption",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 64
                }
            ],
            "methodsClass": [
                {
                    "name": "getCopyContentControls",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getLabel",
                    "args": [
                        {
                            "name": "nameTag",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "nameTag",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnChanges, SimpleChanges, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'content-controls',\n  templateUrl: './content-controls.component.html',\n  styleUrls: [ './content-controls.component.css' ]\n})\nexport class ContentControlsComponent implements OnChanges {\n  @Input() contentControls: any[];\n  @Input() selectedOption: any;\n  @Output() selectedOptionChange: EventEmitter<any> = new EventEmitter();\n  @Input() setFormValue: (id: string, value: string) => void;\n\n  copyContentControls: any[] = [];\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.hasOwnProperty(\"contentControls\")) {\n      this.copyContentControls = this.getCopyContentControls()\n    }\n  }\n\n  getCopyContentControls () {\n    let copyContentControls: any[] = [];\n\n    for (i = 0; i < this.contentControls?.length; i++) {\n      var copyContentControl = this.contentControls[i];\n      copyContentControls[i] = {...copyContentControl};\n    }\n\n    let groupsRadioControls: any[] = copyContentControls.filter(contentControl => contentControl.Tag != \"\" && contentControl.Type == \"radio\").reduce((r, a) => {\n      r[a.GroupKey] = r[a.GroupKey] || [];\n      r[a.GroupKey].push({Tag: a.Tag, checked: a.Value});\n      return r;\n    }, {});\n\n    for (const [key, value] of Object.entries(groupsRadioControls)) {\n      let index = [];\n      let first = true;\n\n      for (var i = 0; i < copyContentControls.length; i++) {\n        if (copyContentControls[i].GroupKey && copyContentControls[i].GroupKey == key) {\n          index.push(i);\n        } \n      }\n\n      for (var i = 0; i < index.length; i++) {\n        if (first) {\n          copyContentControls[index[i]].Tag = key;\n          copyContentControls[index[i]].Value = value;\n          first = false;\n        } else {\n          copyContentControls.splice(index[i], 1);\n        }\n      }\n    }\n\n    return copyContentControls.filter(contentControl => contentControl.Tag != \"\");\n  }\n\n  getLabel(nameTag: string) {\n    return nameTag.replace(/([a-z])([A-Z])/g, '$1 $2');\n  }\n\n  onChangeSelectedOption = (value: any) => {\n    this.selectedOptionChange.emit(value);\n  }\n\n }",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".controlBlock {\n  width: 370px;\n  text-align: right;\n  margin-bottom: 20px;\n  display: inline-block;\n}\n\n.control {\n  margin: 5px;\n}\n\n.radioControl {\n  text-align: left;\n  display: inline-block;\n  width: 193px;\n}\n\nlabel {\n  font-weight: 700;\n  font-size: 14px;\n  line-height: 20px;\n  display: inline-block;\n  padding-right: 10px;\n}\n\n.radioLabel {\n  padding-left: 5px;\n}\n\ninput {\n  color: rgb(51, 51, 51);\n  box-shadow: rgb(0 0 0 / 10%) 0px 0px 0px 1px inset;\n  line-height: 16px;\n  padding: 6px 12px;\n  border-radius: 3em;\n  border: none;\n  box-sizing: border-box;\n  margin: 0px;\n}\n\niframe {\n  display: inline-block;\n}",
                    "styleUrl": "./content-controls.component.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnChanges"
            ],
            "templateData": "<div class=\"controlBlock\">\n  <div *ngFor=\"let contentControl of copyContentControls\" [ngSwitch]=\"contentControl.Type\">\n\n    <input-content-control\n      *ngSwitchCase=\"'input'\"\n      [id]=\"contentControl.Tag\"\n      [label]=\"getLabel(contentControl.Tag)\"\n      [value]=\"contentControl.Value\"\n      (onChangeSelectedOption)=\"onChangeSelectedOption($event)\"\n      [setFormValue]=\"setFormValue\"\n      >\n    </input-content-control>\n\n    <radio-content-control\n      *ngSwitchCase=\"'radio'\"\n      [id]=\"contentControl.Tag\"\n      [label]=\"getLabel(contentControl.Tag)\"\n      [options]=\"contentControl.Value\"\n      (onChangeSelectedOption)=\"onChangeSelectedOption($event)\"\n      [setFormValue]=\"setFormValue\"\n    ></radio-content-control>\n\n  </div>\n</div>"
        },
        {
            "name": "ContentControlsStoriesComponent",
            "id": "component-ContentControlsStoriesComponent-1cf9a20a7906f46701ddccd85cd116bf4185f447cb7c8781eaeb9f728a63b3c74656325fcd0f8def68be96b5f4007d3047d347e1710b5860e19eb3b38d351dbf",
            "file": "src/app/components/content-controls/content-controls-stories/content-controls-stories.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "content-controls-stories",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./content-controls-stories.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "IConfig",
                    "decorators": []
                },
                {
                    "name": "documentServerUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "editorId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "persons",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "IPerson[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "connector",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "contentControls",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "getAllContentControls",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "onBlurContentControl",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 67
                },
                {
                    "name": "onChangeContentControl",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "onChangeSelect",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "onDocumentReady",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 71
                },
                {
                    "name": "selectedPerson",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "setFormValue",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { IConfig } from '@onlyoffice/document-editor-angular';\nimport { IPerson } from '../../../model/person';\n\n@Component({\n  selector: 'content-controls-stories',\n  templateUrl: './content-controls-stories.component.html'\n})\nexport class ContentControlsStoriesComponent {\n  @Input() editorId: string;\n  @Input() documentServerUrl: string;\n  @Input() config: IConfig;\n  @Input() persons: IPerson[];\n\n  connector: any = null;\n\n  contentControls: any;\n  selectedPerson: any;\n\n  onChangeSelect = () => {\n    for (var [key, value] of Object.entries<string>(this.selectedPerson.value)) {\n      if (key == \"Sex\") {\n        key = value == \"Male\" ? \"Male\" : \"Female\";\n        value = \"true\";\n      }\n\n      this.setFormValue(key, value || \"\");\n    }\n  };\n\n  setFormValue = (formId: string, value: string) => {\n    this.connector.executeMethod(\"GetFormsByTag\", [formId], function(forms: any) {\n      this.connector.executeMethod(\"SetFormValue\", [forms[0][\"InternalId\"], value], null);\n    }.bind(this));\n  }\n\n  getAllContentControls = () => {\n    this.connector.executeMethod (\"GetAllContentControls\", null, function(data: any) {\n      for (let i = 0; i < data.length; i++) {\n        switch (data[i].Tag) {\n          case \"Male\":\n            data[i].GroupKey = \"Sex\";\n            data[i].Type = \"radio\";\n            break;\n          case \"Female\":\n            data[i].GroupKey = \"Sex\";\n            data[i].Type = \"radio\";\n            break;\n          default:\n            data[i].Type = \"input\";\n        }\n\n        this.connector.executeMethod(\"GetFormValue\", [data[i].InternalId], (value: any) => {\n            data[i].Value = value ? value : \"\";\n            if (data.length - 1 == i) {\n              this.contentControls = data.filter((contentControl: any) => contentControl.Tag != \"\");\n            }\n        });\n      }\n    }.bind(this));\n  }\n\n  onChangeContentControl = (oPr: { Tag?: string; InternalId?: string }) => {\n    this.getAllContentControls();\n  };\n\n  onBlurContentControl = (oPr: { Tag: string; InternalId: string }) => {\n    this.selectedPerson = {label: \"Custom Data\"};\n  };\n\n  onDocumentReady = () => {\n    try {\n      var editor = window.DocEditor.instances[\"pdfEditor\"];\n      this.connector = editor.createConnector();\n      this.connector.connect();\n\n      this.getAllContentControls();\n      this.connector.attachEvent(\"onChangeContentControl\", this.onChangeContentControl);\n      this.connector.attachEvent(\"onBlurContentControl\", this.onBlurContentControl);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<ng-select \n  [items]=\"persons\"\n  (change)=\"onChangeSelect()\" \n  [(ngModel)]=\"selectedPerson\">\n</ng-select>\n<br/>\n\n<content-controls [contentControls]=\"contentControls\" [setFormValue]=\"setFormValue\" [(selectedOption)]=\"selectedPerson\" ></content-controls>\n\n<document-editor \n  [id]=\"editorId\" \n  [documentServerUrl]=\"documentServerUrl\"\n  [config]=\"config\"\n  [events_onDocumentReady]=\"onDocumentReady\"\n></document-editor>"
        },
        {
            "name": "DocumentEditorComponent",
            "id": "component-DocumentEditorComponent-30fe7c48cd0b5888af7fd4d0b0787875c9567ae1a895161107efade1a97b48290fc845c2758bfc2ade1f624ab316f7892180f9cb9c06e7fdc05d47a95ad489f6",
            "file": "projects/onlyoffice/document-editor-angular/src/lib/components/document-editor.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "document-editor",
            "styleUrls": [],
            "styles": [],
            "template": "<div [id]=\"id\"></div>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "IConfig",
                    "decorators": []
                },
                {
                    "name": "document_fileType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "document_title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "documentServerUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "documentType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "editorConfig_lang",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "events_onAppReady",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "function",
                    "decorators": []
                },
                {
                    "name": "events_onDocumentReady",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": "function",
                    "decorators": []
                },
                {
                    "name": "events_onDocumentStateChange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "function",
                    "decorators": []
                },
                {
                    "name": "events_onError",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "function",
                    "decorators": []
                },
                {
                    "name": "events_onInfo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 54,
                    "type": "function",
                    "decorators": []
                },
                {
                    "name": "events_onMakeActionLink",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "function",
                    "decorators": []
                },
                {
                    "name": "events_onMetaChange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 52,
                    "type": "function",
                    "decorators": []
                },
                {
                    "name": "events_onRequestCompareFile",
                    "deprecated": true,
                    "deprecationMessage": "Deprecated since version 7.5, please use events_onRequestSelectDocument instead.",
                    "jsdoctags": [
                        {
                            "pos": 2413,
                            "end": 2509,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 338,
                            "tagName": {
                                "pos": 2414,
                                "end": 2424,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "deprecated"
                            },
                            "comment": "<p>Deprecated since version 7.5, please use events_onRequestSelectDocument instead.</p>\n"
                        }
                    ],
                    "line": 69,
                    "type": "function",
                    "decorators": []
                },
                {
                    "name": "events_onRequestEditRights",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70,
                    "type": "function",
                    "decorators": []
                },
                {
                    "name": "events_onRequestHistory",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "function",
                    "decorators": []
                },
                {
                    "name": "events_onRequestHistoryClose",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "function",
                    "decorators": []
                },
                {
                    "name": "events_onRequestHistoryData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 73,
                    "type": "function",
                    "decorators": []
                },
                {
                    "name": "events_onRequestInsertImage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "function",
                    "decorators": []
                },
                {
                    "name": "events_onRequestMailMergeRecipients",
                    "deprecated": true,
                    "deprecationMessage": "Deprecated since version 7.5, please use events_onRequestSelectSpreadsheet instead.",
                    "jsdoctags": [
                        {
                            "pos": 2226,
                            "end": 2325,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 338,
                            "tagName": {
                                "pos": 2227,
                                "end": 2237,
                                "flags": 16842752,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 80,
                                "escapedText": "deprecated"
                            },
                            "comment": "<p>Deprecated since version 7.5, please use events_onRequestSelectSpreadsheet instead.</p>\n"
                        }
                    ],
                    "line": 65,
                    "type": "function",
                    "decorators": []
                },
                {
                    "name": "events_onRequestRename",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 58,
                    "type": "function",
                    "decorators": []
                },
                {
                    "name": "events_onRequestRestore",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "function",
                    "decorators": []
                },
                {
                    "name": "events_onRequestSaveAs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 61,
                    "type": "function",
                    "decorators": []
                },
                {
                    "name": "events_onRequestSelectDocument",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 76,
                    "type": "function",
                    "decorators": []
                },
                {
                    "name": "events_onRequestSelectSpreadsheet",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "function",
                    "decorators": []
                },
                {
                    "name": "events_onRequestSharingSettings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 57,
                    "type": "function",
                    "decorators": []
                },
                {
                    "name": "events_onRequestUsers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 77,
                    "type": "function",
                    "decorators": []
                },
                {
                    "name": "events_onWarning",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 55,
                    "type": "function",
                    "decorators": []
                },
                {
                    "name": "height",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "onLoadComponentError",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "function",
                    "decorators": []
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "width",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "getDocument",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 190
                },
                {
                    "name": "getEditorConfig",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 206
                },
                {
                    "name": "isFirstOnChanges",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 79
                },
                {
                    "name": "onError",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 217
                },
                {
                    "name": "onLoad",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 124
                }
            ],
            "methodsClass": [
                {
                    "name": "onAppReady",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 239,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';\nimport { IConfig } from '../model/config';\nimport loadScript from \"../utils/loadScript\";\nimport { cloneDeep } from 'lodash';\n\ndeclare global {\n  interface Window {\n      DocsAPI?: any;\n      DocEditor?: any;\n  }\n}\n\n@Component({\n  selector: 'document-editor',\n  template: '<div [id]=\"id\"></div>',\n  styles: [\n  ]\n})\nexport class DocumentEditorComponent implements OnInit, OnChanges, OnDestroy {\n  @Input() id: string;\n  @Input() documentServerUrl: string;\n  @Input() config: IConfig;\n\n  @Input() document_fileType?: string;\n  @Input() document_title?: string;\n  @Input() documentType?: string;\n  @Input() editorConfig_lang?: string;\n  @Input() height?: string;\n  @Input() type?: string;\n  @Input() width?: string;\n\n  @Input() onLoadComponentError?: (errorCode: number, errorDescription: string) => void;\n\n  @Input() events_onAppReady?: (event: object) => void;\n  @Input() events_onDocumentStateChange?: (event: object) => void;\n  @Input() events_onMetaChange?: (event: object) => void;\n  @Input() events_onDocumentReady?: (event: object) => void;\n  @Input() events_onInfo?: (event: object) => void;\n  @Input() events_onWarning?: (event: object) => void;\n  @Input() events_onError?: (event: object) => void;\n  @Input() events_onRequestSharingSettings?: (event: object) => void;\n  @Input() events_onRequestRename?: (event: object) => void;\n  @Input() events_onMakeActionLink?: (event: object) => void;\n  @Input() events_onRequestInsertImage?: (event: object) => void;\n  @Input() events_onRequestSaveAs?: (event: object) => void;\n  /**\n   * @deprecated Deprecated since version 7.5, please use events_onRequestSelectSpreadsheet instead.\n   */\n  @Input() events_onRequestMailMergeRecipients?: (event: object) => void;\n  /**\n   * @deprecated Deprecated since version 7.5, please use events_onRequestSelectDocument instead.\n   */\n  @Input() events_onRequestCompareFile?: (event: object) => void;\n  @Input() events_onRequestEditRights?: (event: object) => void;\n  @Input() events_onRequestHistory?: (event: object) => void;\n  @Input() events_onRequestHistoryClose?: (event: object) => void;\n  @Input() events_onRequestHistoryData?: (event: object) => void;\n  @Input() events_onRequestRestore?: (event: object) => void;\n  @Input() events_onRequestSelectSpreadsheet?: (event: object) => void;\n  @Input() events_onRequestSelectDocument?: (event: object) => void;\n  @Input() events_onRequestUsers?: (event: object) => void;\n\n  isFirstOnChanges: boolean = true;\n\n  constructor() { }\n\n  ngOnInit(): void {\n    let url = this.documentServerUrl;\n    if (!url.endsWith(\"/\")) url += \"/\";\n\n    const docApiUrl = `${url}web-apps/apps/api/documents/api.js`;\n    loadScript(docApiUrl, \"onlyoffice-api-script\")\n      .then(() => this.onLoad())\n      .catch((err) => {\n        this.onError(-2);\n      });\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const listNameChanges = [\"config\", \"document_fileType\", \"document_title\", \"documentType\", \"editorConfig_lang\", \"height\", \"type\", \"width\"];\n\n    if (this.isFirstOnChanges) {\n      this.isFirstOnChanges = false;\n      return;\n    }\n\n    for (const name of listNameChanges) {\n      if (changes.hasOwnProperty(name)) {\n        if (window?.DocEditor?.instances[this.id]) {\n          window.DocEditor.instances[this.id].destroyEditor();\n          window.DocEditor.instances[this.id] = undefined;\n    \n          console.log(\"Important props have been changed. Load new Editor.\");\n          this.onLoad();\n          return;\n        }\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (window?.DocEditor?.instances[this.id]) {\n      window.DocEditor.instances[this.id].destroyEditor();\n      window.DocEditor.instances[this.id] = undefined;\n    }\n  }\n\n  onLoad = () => {\n    try {\n      if (!window.DocsAPI) this.onError(-3);\n      if (window?.DocEditor?.instances[this.id]) {\n        console.log(\"Skip loading. Instance already exists\", this.id);\n        return;\n      }\n\n      if (!window?.DocEditor?.instances) {\n        window.DocEditor = { instances: {} };\n      }\n\n      var cloneConfig = cloneDeep(this.config);\n\n      var propsConfig: any = {\n        documentType: this.documentType,\n        events: {\n          onAppReady: this.onAppReady,\n          onDocumentStateChange: this.events_onDocumentStateChange,\n          onMetaChange: this.events_onMetaChange,\n          onDocumentReady: this.events_onDocumentReady,\n          onInfo: this.events_onInfo,\n          onWarning: this.events_onWarning,\n          onError: this.events_onError,\n          onRequestSharingSettings: this.events_onRequestSharingSettings,\n          onRequestRename: this.events_onRequestRename,\n          onMakeActionLink: this.events_onMakeActionLink,\n          onRequestInsertImage: this.events_onRequestInsertImage,\n          onRequestSaveAs: this.events_onRequestSaveAs,\n          onRequestMailMergeRecipients: this.events_onRequestMailMergeRecipients,\n          onRequestCompareFile: this.events_onRequestCompareFile,\n          onRequestEditRights: this.events_onRequestEditRights,\n          onRequestHistory: this.events_onRequestHistory,\n          onRequestHistoryClose: this.events_onRequestHistoryClose,\n          onRequestHistoryData: this.events_onRequestHistoryData,\n          onRequestRestore: this.events_onRequestRestore,\n          onRequestSelectSpreadsheet: this.events_onRequestSelectSpreadsheet,\n          onRequestSelectDocument: this.events_onRequestSelectDocument,\n          onRequestUsers: this.events_onRequestUsers\n        },\n        height: this.height,\n        type: this.type,\n        width: this.width,\n      };\n\n      const document = this.getDocument();\n      const editorConfig = this.getEditorConfig();\n\n      if (document !== null) {\n        propsConfig.document = document;\n      }\n\n      if (editorConfig !== null) {\n        propsConfig.editorConfig = editorConfig;\n      }\n\n      let initConfig = Object.assign(propsConfig, cloneConfig || {});\n\n      const editor = window.DocsAPI.DocEditor(this.id, initConfig);\n      window.DocEditor.instances[this.id] = editor;\n    } catch (err: any) {\n      console.error(err);\n      this.onError(-1);\n    }\n  };\n\n  getDocument = () => {\n    var document: any = null;\n\n    if (this.document_fileType) {\n      document = document || {};\n      document.fileType = this.document_fileType;\n    }\n\n    if (this.document_title) {\n      document = document || {};\n      document.document_title = this.document_title;\n    }\n\n    return document;\n  }\n\n  getEditorConfig = () => {\n    var editorConfig: any = null;\n\n    if (this.editorConfig_lang) {\n      editorConfig = editorConfig || {};\n      editorConfig.lang = this.editorConfig_lang;\n    }\n\n    return editorConfig;\n  }\n\n  onError = (errorCode: number) => {\n    let message;\n\n    switch(errorCode) {\n      case -2:\n        message = \"Error load DocsAPI from \" + this.documentServerUrl;\n        break;\n      case -3:\n        message = \"DocsAPI is not defined\";\n        break;\n      default:\n        message = \"Unknown error loading component\";\n        errorCode = -1;\n    }\n\n    if (typeof this.onLoadComponentError == \"undefined\") {\n      console.error(message);\n    } else {\n      this.onLoadComponentError(errorCode, message);\n    }\n  }\n\n  onAppReady() {\n    this.events_onAppReady!(window.DocEditor.instances[this.id]);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 79
            },
            "extends": [],
            "implements": [
                "OnInit",
                "OnChanges",
                "OnDestroy"
            ]
        },
        {
            "name": "FormsStoriesComponent",
            "id": "component-FormsStoriesComponent-74ec22fb5fe646e13f6bd29daf17caa7867346f93162aff1569ae152f804ea2d2724b9f42b20c4204af855a1913e656201aae7aeb9bef9079d478d4700894cdf",
            "file": "src/app/components/forms/forms-stories/forms-stories.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "FormsService",
                    "type": "injectable"
                }
            ],
            "selector": "forms-stories",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./forms-stories.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "IConfig",
                    "decorators": []
                },
                {
                    "name": "documentServerUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "editorId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "formsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormsService",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "selectedForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "onChangeSelect",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\nimport { IConfig } from '@onlyoffice/document-editor-angular';\nimport { FormsService } from 'src/app/service/forms.service';\n\n@Component({\n  selector: 'forms-stories',\n  templateUrl: './forms-stories.component.html',\n  providers: [FormsService]\n})\nexport class FormsStoriesComponent implements OnInit {\n  @Input() editorId: string;\n  @Input() documentServerUrl: string;\n  @Input() config: IConfig;\n\n  loading = false;\n  selectedForm: any;\n\n  constructor( public formsService: FormsService ) {}\n\n  ngOnInit(): void {\n    this.loading = true;\n    this.formsService.getForms().subscribe(() => {\n      this.loading = false\n    });\n  }\n\n  onChangeSelect(): void {\n    let newConfig = this.config;\n    newConfig = {...newConfig}\n\n    newConfig.document!.title = this.selectedForm.title;\n    newConfig.document!.url = this.selectedForm.url;\n    newConfig.document!.key = \"pdf\" + Math.random();\n\n    this.config = newConfig;\n  }\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formsService",
                        "type": "FormsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "formsService",
                        "type": "FormsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-select [items]=\"formsService.forms\"\n    bindLabel=\"label\"\n    bindValue=\"value\"\n    [loading]=\"loading\"\n    (change)=\"onChangeSelect()\"\n    [(ngModel)]=\"selectedForm\">\n</ng-select>\n<br/>\n\n<document-editor\n  [id]=\"editorId\"\n  [documentServerUrl]=\"documentServerUrl\"\n  [config]=\"config\"\n></document-editor>"
        },
        {
            "name": "InputContentControlComponent",
            "id": "component-InputContentControlComponent-1a730c7160e72f08ed68230fdd12ed21bf5d250d4a347b26d8a504417b9e7506304028876a055590592005c0f714365314e9ccfe8ce53e98396e10db1bfd6e91",
            "file": "src/app/components/content-controls/input-content-control/input-content-control.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "input-content-control",
            "styleUrls": [
                "./../content-controls.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./input-content-control.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "selectedOption",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "setFormValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "function",
                    "decorators": []
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onChangeSelectedOption",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "getValue",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'input-content-control',\n  templateUrl: './input-content-control.component.html',\n  styleUrls: [ './../content-controls.component.css' ]\n})\nexport class InputContentControlComponent {\n  @Input() id: string;\n  @Input() value: string;\n  @Input() label: string;\n  @Input() selectedOption: any;\n  @Output() onChangeSelectedOption: EventEmitter<any> = new EventEmitter<any>();\n  @Input() setFormValue: (id: string, value: string) => void;\n\n  getValue(event: Event): string {\n    this.setFormValue((event.target as HTMLInputElement).id, (event.target as HTMLInputElement).value);\n    this.onChangeSelectedOption.emit({label: \"Custom Data\"});\n    return (event.target as HTMLInputElement).value;\n  }\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".controlBlock {\n  width: 370px;\n  text-align: right;\n  margin-bottom: 20px;\n  display: inline-block;\n}\n\n.control {\n  margin: 5px;\n}\n\n.radioControl {\n  text-align: left;\n  display: inline-block;\n  width: 193px;\n}\n\nlabel {\n  font-weight: 700;\n  font-size: 14px;\n  line-height: 20px;\n  display: inline-block;\n  padding-right: 10px;\n}\n\n.radioLabel {\n  padding-left: 5px;\n}\n\ninput {\n  color: rgb(51, 51, 51);\n  box-shadow: rgb(0 0 0 / 10%) 0px 0px 0px 1px inset;\n  line-height: 16px;\n  padding: 6px 12px;\n  border-radius: 3em;\n  border: none;\n  box-sizing: border-box;\n  margin: 0px;\n}\n\niframe {\n  display: inline-block;\n}",
                    "styleUrl": "./../content-controls.component.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"control\">\n  <label>{{ label }}</label>\n  <input [id]=\"id\" [value]=\"value\" (keyup)=\"value=getValue($event)\" />\n</div>"
        },
        {
            "name": "ListCommentsComponent",
            "id": "component-ListCommentsComponent-45d09db0574ec19b5971c2a38df448be5e8a8e8a7e6a524b9db751364dba25f62e6a6058ca424a44958bf998da450e12f8fa817bac418c6f35d1f77a495a3a1d",
            "file": "src/app/components/comments/list-comments/list-comments.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "list-comments",
            "styleUrls": [
                "../comments.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./list-comments.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "comments",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "any[]",
                    "decorators": []
                },
                {
                    "name": "connector",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "userName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "dateParser",
                    "args": [
                        {
                            "name": "date",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "goToComment",
                    "args": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, SimpleChanges, OnChanges} from '@angular/core'\n\n@Component({\n  selector: 'list-comments',\n  templateUrl: './list-comments.component.html',\n  styleUrls: ['../comments.component.css']\n})\nexport class ListCommentsComponent implements OnChanges {\n  @Input() connector: any;\n  @Input() userName: string;\n  @Input() comments: any[];\n\n  goToComment (e: any) {\n    if (e.target.parentElement.id) {\n      this.connector.executeMethod(\"MoveToComment\",[e.target.parentElement.id]);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.hasOwnProperty(\"connector\")) {\n      if (this.connector) {\n        this.connector.attachEvent(\"onAddComment\",  function (val:any) {\n          console.log(\"onAddComment\");\n          var comments = this.comments;\n          var index = this.comments.findIndex((comment:any) => comment.Id === val.Id)\n\n          if (index == -1) {\n             this.comments = [val, ...comments];\n          }\n        }.bind(this));\n\n        this.connector.attachEvent(\"onRemoveComment\",  function (val:any) {\n          console.log(\"onRemoveComment\");\n          const index = this.comments.findIndex((comment:any) => comment.Id === val.Id);\n\n          if (index !== -1) {\n            this.comments.splice(index, 1);\n          }\n        }.bind(this));\n\n        this.connector.attachEvent(\"onChangeCommentData\",  function (val:any) {\n          const index = this.comments.findIndex((comment:any) => comment.Id === val.Id);\n\n          if (index !== -1) {\n            this.comments[index].Data = val.Data;\n          }\n        }.bind(this));\n      }\n    }\n  }\n\n  dateParser(date: string) {\n    return new Date(parseInt(date, 10)).toLocaleString();\n  }\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "#blockComments{\n  margin: 5px;\n  display: inline-block;\n  width: 306px;\n}\n\n.comment-div {\n  position: relative;\n  border-radius: 5px;\n  border: 2px solid #000;\n  margin: 5px;\n  text-align: right;\n}\n\n.comment-span{\n  display: block;\n  margin: 3px;\n  text-align: left;\n}\n\n\n.comment-del-div {\n  position: absolute;\n  margin-top: 3px;\n  margin-right: 5px;\n  right: 0;\n} \n\n.comment-del {\n  display: inline-flex;\n  width: 1rem;\n  height: 1rem;\n  position: relative;\n  cursor: pointer;\n}\n\n.comment-del::before,\n.comment-del::after {\n  content: '';\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  width: 1rem;\n  height: .1rem;\n  background-color: #f00;\n  margin: -.05rem 0 0 -.4rem;\n  transform: rotate(-45deg);\n  border-radius: .1rem;\n}\n\n.comment-del::after {\n  transform: rotate(45deg);\n}\n\n.comment-replies{\n  padding-left: 24px;\n  margin-left: 7px;\n  box-sizing: border-box;\n  background-image: url(reply.svg);\n  background-size: 22px;\n  background-repeat: no-repeat;\n}\n\ntextarea {\n  width: 300px;\n  min-height: 100px;\n}\n\niframe {\n  display: inline-block;\n}",
                    "styleUrl": "../comments.component.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnChanges"
            ],
            "templateData": "<div>\n  <div *ngFor=\"let comment of comments\" class=\"comment-div\">\n    <remove-comment [connector]=\"connector\" [commentId]=\"comment['Id']\"></remove-comment>\n    <div [id]=\"comment['Id']\" (click)=\"goToComment($event)\">\n      <span class=\"comment-span\">Author: {{ comment[\"Data\"][\"UserName\"] }}</span>\n      <span class=\"comment-span\">Date: {{ dateParser(comment[\"Data\"][\"Time\"]) }}</span>\n      <span class=\"comment-span\">Message: {{ comment[\"Data\"][\"Text\"] }}</span>\n    </div>\n    <div class=\"comment-replies\">\n      <div *ngFor=\"let reply of comment['Data']['Replies']; let index = index\" [style.marginBottom]=\"'10px'\">\n        <remove-comment-reply [connector]=\"connector\" [comment]=\"comment\" [replyId]=\"index\"></remove-comment-reply>\n        <span class=\"comment-span\">Author: {{ reply[\"UserName\"] }}</span>\n        <span class=\"comment-span\">Date: {{ dateParser(reply[\"Time\"]) }}</span>\n        <span class=\"comment-span\">Message: {{ reply[\"Text\"] }}</span>\n      </div>\n    </div>\n    <add-comment-reply [connector]=\"connector\" [userName]=\"userName\" [comment]=\"comment\"></add-comment-reply>\n  </div>\n</div>"
        },
        {
            "name": "RadioContentControlComponent",
            "id": "component-RadioContentControlComponent-7428f22caeac3e6b7b6f94d952648b5132c0ed1ffd0f3b3cc3ec853d7ec266e3ebfd088cd03de8182e0b66076091f3d140f6411b59b778d8c312389bb42e92c1",
            "file": "src/app/components/content-controls/radio-content-control/radio-content-control.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "radio-content-control",
            "styleUrls": [
                "./../content-controls.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./radio-content-control.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "any[]",
                    "decorators": []
                },
                {
                    "name": "selectedOption",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "setFormValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "function",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onChangeSelectedOption",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "getLabel",
                    "args": [
                        {
                            "name": "nameTag",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "nameTag",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isChecked",
                    "args": [
                        {
                            "name": "nameTag",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "nameTag",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'radio-content-control',\n  templateUrl: './radio-content-control.component.html',\n  styleUrls: [ './../content-controls.component.css' ]\n})\nexport class RadioContentControlComponent {\n  @Input() id: string;\n  @Input() label: string;\n  @Input() options: any [];\n  @Input() selectedOption: any;\n  @Output() onChangeSelectedOption: EventEmitter<any> = new EventEmitter<any>();\n  @Input() setFormValue: (id: string, value: string) => void;\n\n  getLabel(nameTag: string) {\n    return nameTag.replace(/([a-z])([A-Z])/g, '$1 $2');\n  }\n\n  onChange(event: Event) {\n    this.setFormValue((event.target as HTMLInputElement).id, 'true');\n    this.onChangeSelectedOption.emit({label: \"Custom Data\"});\n  }\n\n  isChecked(nameTag: string) {\n    for (var i = 0; i < this.options.length; i++) {\n      if (this.options[i].checked == true) {\n        return nameTag == this.options[i].Tag;\n      }\n    }\n\n    return false;\n  }\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".controlBlock {\n  width: 370px;\n  text-align: right;\n  margin-bottom: 20px;\n  display: inline-block;\n}\n\n.control {\n  margin: 5px;\n}\n\n.radioControl {\n  text-align: left;\n  display: inline-block;\n  width: 193px;\n}\n\nlabel {\n  font-weight: 700;\n  font-size: 14px;\n  line-height: 20px;\n  display: inline-block;\n  padding-right: 10px;\n}\n\n.radioLabel {\n  padding-left: 5px;\n}\n\ninput {\n  color: rgb(51, 51, 51);\n  box-shadow: rgb(0 0 0 / 10%) 0px 0px 0px 1px inset;\n  line-height: 16px;\n  padding: 6px 12px;\n  border-radius: 3em;\n  border: none;\n  box-sizing: border-box;\n  margin: 0px;\n}\n\niframe {\n  display: inline-block;\n}",
                    "styleUrl": "./../content-controls.component.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div [id]=\"id\" class=\"control\">\n  <label>{{ label }}</label>\n  <div class=\"radioControl\">\n      <span *ngFor=\"let option of options\">\n        <input type=\"radio\" [id]=\"option.Tag\" [name]=\"id\" [checked]=\"isChecked(option.Tag)\" (change)=\"onChange($event)\" />\n        <label class=\"radioLabel\">{{ getLabel(option.Tag) }}</label>\n      </span>\n  </div>\n</div>"
        },
        {
            "name": "RemoveCommentComponent",
            "id": "component-RemoveCommentComponent-468a92c3692f7928360b87d4f31133c7c0cada79751b1f4eacdf9795b9fea51e6a7d4e805d98b71536c60c9e71f1881982cffea3e8f798cbff48a258395af398",
            "file": "src/app/components/comments/remove-comment/remove-comment.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "remove-comment",
            "styleUrls": [
                "../comments.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./remove-comment.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "commentId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "connector",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "removeComment",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input} from '@angular/core'\n\n@Component({\n  selector: 'remove-comment',\n  templateUrl: './remove-comment.component.html',\n  styleUrls: ['../comments.component.css']\n})\nexport class RemoveCommentComponent {\n  @Input() connector: any;\n  @Input() commentId: string;\n\n  removeComment () {\n    this.connector.executeMethod(\"RemoveComments\", [[this.commentId]]);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "#blockComments{\n  margin: 5px;\n  display: inline-block;\n  width: 306px;\n}\n\n.comment-div {\n  position: relative;\n  border-radius: 5px;\n  border: 2px solid #000;\n  margin: 5px;\n  text-align: right;\n}\n\n.comment-span{\n  display: block;\n  margin: 3px;\n  text-align: left;\n}\n\n\n.comment-del-div {\n  position: absolute;\n  margin-top: 3px;\n  margin-right: 5px;\n  right: 0;\n} \n\n.comment-del {\n  display: inline-flex;\n  width: 1rem;\n  height: 1rem;\n  position: relative;\n  cursor: pointer;\n}\n\n.comment-del::before,\n.comment-del::after {\n  content: '';\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  width: 1rem;\n  height: .1rem;\n  background-color: #f00;\n  margin: -.05rem 0 0 -.4rem;\n  transform: rotate(-45deg);\n  border-radius: .1rem;\n}\n\n.comment-del::after {\n  transform: rotate(45deg);\n}\n\n.comment-replies{\n  padding-left: 24px;\n  margin-left: 7px;\n  box-sizing: border-box;\n  background-image: url(reply.svg);\n  background-size: 22px;\n  background-repeat: no-repeat;\n}\n\ntextarea {\n  width: 300px;\n  min-height: 100px;\n}\n\niframe {\n  display: inline-block;\n}",
                    "styleUrl": "../comments.component.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"comment-del-div\">\n  <span class=\"comment-del\" (click)=\"removeComment()\"></span>\n</div>"
        },
        {
            "name": "RemoveCommentReplyComponent",
            "id": "component-RemoveCommentReplyComponent-319218fabbc35dfc7394d15943f2a69e03f4bcb9b8cca0624c2f9842dae6a62b9c05171efa8de5866d4327bbbc1d7e888423c2b531d8a333c484f4fbfbdcdc5f",
            "file": "src/app/components/comments/remove-comment-reply/remove-comment-reply.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "remove-comment-reply",
            "styleUrls": [
                "../comments.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./remove-comment-reply.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "comment",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "connector",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "replyId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "removeCommentReply",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input} from '@angular/core'\n\n@Component({\n  selector: 'remove-comment-reply',\n  templateUrl: './remove-comment-reply.component.html',\n  styleUrls: ['../comments.component.css']\n})\nexport class RemoveCommentReplyComponent {\n  @Input() connector: any;\n  @Input() comment: any;\n  @Input() replyId: number;\n\n  removeCommentReply () {\n    let commentData = this.comment[\"Data\"];\n    commentData[\"Replies\"].splice(this.replyId, 1);\n\n    this.connector.executeMethod(\"ChangeComment\", [this.comment[\"Id\"], commentData]);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "#blockComments{\n  margin: 5px;\n  display: inline-block;\n  width: 306px;\n}\n\n.comment-div {\n  position: relative;\n  border-radius: 5px;\n  border: 2px solid #000;\n  margin: 5px;\n  text-align: right;\n}\n\n.comment-span{\n  display: block;\n  margin: 3px;\n  text-align: left;\n}\n\n\n.comment-del-div {\n  position: absolute;\n  margin-top: 3px;\n  margin-right: 5px;\n  right: 0;\n} \n\n.comment-del {\n  display: inline-flex;\n  width: 1rem;\n  height: 1rem;\n  position: relative;\n  cursor: pointer;\n}\n\n.comment-del::before,\n.comment-del::after {\n  content: '';\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  width: 1rem;\n  height: .1rem;\n  background-color: #f00;\n  margin: -.05rem 0 0 -.4rem;\n  transform: rotate(-45deg);\n  border-radius: .1rem;\n}\n\n.comment-del::after {\n  transform: rotate(45deg);\n}\n\n.comment-replies{\n  padding-left: 24px;\n  margin-left: 7px;\n  box-sizing: border-box;\n  background-image: url(reply.svg);\n  background-size: 22px;\n  background-repeat: no-repeat;\n}\n\ntextarea {\n  width: 300px;\n  min-height: 100px;\n}\n\niframe {\n  display: inline-block;\n}",
                    "styleUrl": "../comments.component.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"comment-del-div\">\n  <span class=\"comment-del\" (click)=\"removeCommentReply()\"></span>\n</div>"
        },
        {
            "name": "ReviewComponent",
            "id": "component-ReviewComponent-32cd19c1fe64a1088e5ab4003aea0825d4f6606f80439183e65037b1321b005c3f8ecb6f0fc2bef2ac5cd3efaf41c582e5f16b7f19ecd39c91e92f4353975dcf",
            "file": "src/app/components/review/review.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "review",
            "styleUrls": [
                "./review.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./review.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "connector",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "acceptReview",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "nextReview",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "prevReview",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "rejectReview",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input} from '@angular/core'\n\n@Component({\n  selector: 'review',\n  templateUrl: './review.component.html',\n  styleUrls: ['./review.component.css']\n})\nexport class ReviewComponent {\n  @Input() connector: any;\n\n  prevReview() {\n    this.connector.executeMethod(\"MoveToNextReviewChange\", [false]);\n  };\n\n  nextReview() {\n    this.connector.executeMethod(\"MoveToNextReviewChange\");\n  };\n\n  acceptReview() {\n    this.connector.executeMethod(\"AcceptReviewChanges\");\n  };\n\n  rejectReview() {\n    this.connector.executeMethod(\"RejectReviewChanges\");\n  };\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".reviewBlock {\n  text-align: center;\n  margin-bottom: 16px;\n}\n\nbutton {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n  font-size: 12px;\n  padding: 10px 16px;\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n  margin-right: 5px;\n}\n\nbutton:hover {\n  background: rgb(221, 235, 250);\n}",
                    "styleUrl": "./review.component.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"reviewBlock\">\n  <button (click)=\"prevReview()\">Prev</button>\n  <button (click)=\"nextReview()\">Next</button>\n  <button (click)=\"acceptReview()\">Accept</button>\n  <button (click)=\"rejectReview()\">Reject</button>\n</div>"
        },
        {
            "name": "ReviewStoriesComponent",
            "id": "component-ReviewStoriesComponent-1404be67480014c48782b5c8bd4e5bc257b5b78077eb4fe145b7080b1f4dc5481595fc20ca0ab3fdd11e6ccbe5e7274b6c2b3836b5a1b328dc7572c00aa00687",
            "file": "src/app/components/review/review-stories/review-stories.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "review-stories",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./review-stories.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "IConfig",
                    "decorators": []
                },
                {
                    "name": "documentServerUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "editorId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "comments",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "connector",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "onDocumentReady",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { IConfig } from '@onlyoffice/document-editor-angular';\n\n@Component({\n  selector: 'review-stories',\n  templateUrl: './review-stories.component.html'\n})\nexport class ReviewStoriesComponent {\n  @Input() editorId: string;\n  @Input() documentServerUrl: string;\n  @Input() config: IConfig;\n\n  comments: any[] = [];\n  connector: any = null;\n\n  onDocumentReady = () => {\n    var editor = window.DocEditor.instances[this.editorId];\n    this.connector = editor.createConnector();\n  };\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<review [connector]=\"connector\"></review>\n\n<document-editor \n  [id]=\"editorId\" \n  [documentServerUrl]=\"documentServerUrl\"\n  [config]=\"config\"\n  [events_onDocumentReady]=\"onDocumentReady\"\n></document-editor>"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-6233c34edb1dc22b8e8f667af3e8ed5942330d20d8523ca1a0cd4cff8b3fbee5d6a55624f2de1d64531ec2487fc6b00f0d3a45fc80013e35e4d34ceb265c0f24",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { DocumentEditorModule } from '@onlyoffice/document-editor-angular';\n\nimport { AppComponent } from './app.component';\nimport { AddCommentComponent } from './components/comments/add-comment/add-comment.component';\nimport { AddCommentReplyComponent } from './components/comments/add-comment-reply/add-comment-reply.component';\nimport { CommentsComponent } from './components/comments/comments.component';\nimport { ListCommentsComponent } from './components/comments/list-comments/list-comments.component';\nimport { RemoveCommentComponent } from './components/comments/remove-comment/remove-comment.component';\nimport { RemoveCommentReplyComponent } from './components/comments/remove-comment-reply/remove-comment-reply.component';\nimport { CommenstStoriesComponent } from './components/comments/comments-stories/commenst-stories.component';\nimport { ContentControlsStoriesComponent } from './components/content-controls/content-controls-stories/content-controls-stories.component';\nimport { ContentControlsComponent } from './components/content-controls/content-controls.component';\nimport { InputContentControlComponent } from './components/content-controls/input-content-control/input-content-control.component';\nimport { RadioContentControlComponent } from './components/content-controls/radio-content-control/radio-content-control.component';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { FormsStoriesComponent } from './components/forms/forms-stories/forms-stories.component';\nimport { HttpClientModule } from '@angular/common/http';\nimport { ReviewComponent } from './components/review/review.component';\nimport { ReviewStoriesComponent } from './components/review/review-stories/review-stories.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    CommentsComponent,\n    ListCommentsComponent,\n    AddCommentComponent,\n    AddCommentReplyComponent,\n    RemoveCommentComponent,\n    RemoveCommentReplyComponent,\n    CommenstStoriesComponent,\n    ContentControlsStoriesComponent,\n    ContentControlsComponent,\n    InputContentControlComponent,\n    RadioContentControlComponent,\n    FormsStoriesComponent,\n    ReviewComponent,\n    ReviewStoriesComponent\n  ],\n  imports: [\n    BrowserModule,\n    DocumentEditorModule,\n    NgSelectModule,\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    HttpClientModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AddCommentComponent"
                        },
                        {
                            "name": "AddCommentReplyComponent"
                        },
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "CommenstStoriesComponent"
                        },
                        {
                            "name": "CommentsComponent"
                        },
                        {
                            "name": "ContentControlsComponent"
                        },
                        {
                            "name": "ContentControlsStoriesComponent"
                        },
                        {
                            "name": "FormsStoriesComponent"
                        },
                        {
                            "name": "InputContentControlComponent"
                        },
                        {
                            "name": "ListCommentsComponent"
                        },
                        {
                            "name": "RadioContentControlComponent"
                        },
                        {
                            "name": "RemoveCommentComponent"
                        },
                        {
                            "name": "RemoveCommentReplyComponent"
                        },
                        {
                            "name": "ReviewComponent"
                        },
                        {
                            "name": "ReviewStoriesComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "DocumentEditorModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DocumentEditorModule",
            "id": "module-DocumentEditorModule-29e5dfd1107e0dcd16a736775418ccfaf1a76f9f7fe1a328aa567efbe78c032680cf2a266394e591e5881ee2fd544a516ad86043d5e8420185abed3fecfbae01",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/onlyoffice/document-editor-angular/src/lib/document-editor.module.ts",
            "methods": [],
            "sourceCode": "/*\n* (c) Copyright Ascensio System SIA 2024\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*     http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\nimport { NgModule } from '@angular/core';\nimport { DocumentEditorComponent } from './components/document-editor.component';\n\n@NgModule({\n  declarations: [\n    DocumentEditorComponent\n  ],\n  imports: [\n  ],\n  exports: [\n    DocumentEditorComponent\n  ]\n})\nexport class DocumentEditorModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DocumentEditorComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DocumentEditorComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "_createScriptTag",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/onlyoffice/document-editor-angular/src/lib/utils/loadScript.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(id: string, url: string, resolve: (value: unknown) => void, reject: (reason?: any) => void) => {\n  const script = document.createElement(\"script\");\n\n  script.id = id;\n  script.type = \"text/javascript\";\n  script.src = url;\n  script.async = true;\n\n  script.onload = () => {\n    // Remove attribute loading after loading is complete.\n    script.removeAttribute(\"loading\");\n    resolve(null);\n  };\n  script.onerror = (error: any) => {\n    // Remove attribute loading after loading is complete.\n    script.removeAttribute(\"loading\");\n    reject(error);\n  };\n\n  script.setAttribute(\"loading\", \"\");\n\n  return script;\n}"
            },
            {
                "name": "CommentsTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/comments.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "CommentsTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/review.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "ContentControlsTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/filling-form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "DocumentTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/document-editor.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "FomsTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/forms.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "FormTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/document-editor.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "loadScript",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/onlyoffice/document-editor-angular/src/lib/utils/loadScript.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "async (url: string, id: string) => {\n  return new Promise((resolve, reject) => {\n    try {\n      // If DocsAPI is defined return resolve.\n      if (window.DocsAPI) return resolve(null);\n\n      const existedScript = document.getElementById(id);\n\n      if (existedScript) {\n        // If the script element is found, wait for it to load.\n        let intervalHandler = setInterval(() => {\n          const loading = existedScript.getAttribute(\"loading\");\n          if (loading) {\n            // If the download is not completed, continue to wait.\n            return;\n          } else {\n            // If the download is completed, stop the wait.\n            clearInterval(intervalHandler);\n\n            // If DocsAPI is defined, after loading return resolve.\n            if (window.DocsAPI) return resolve(null);\n\n            // If DocsAPI is not defined, delete the existing script and create a new one.\n            const script = _createScriptTag(id, url, resolve, reject);\n            existedScript.remove();\n            document.body.appendChild(script);\n          }\n        }, 500);\n      } else {\n        // If the script element is not found, create it.\n        const script = _createScriptTag(id, url, resolve, reject);\n        document.body.appendChild(script);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  });\n}"
            },
            {
                "name": "PresentationTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/document-editor.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "preview",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": ".storybook/preview.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Preview",
                "defaultValue": "{\n  parameters: {\n    actions: { argTypesRegex: \"^on[A-Z].*\" },\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/,\n      },\n    },\n  },\n}"
            },
            {
                "name": "SpreadsheetTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/document-editor.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/comments.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<any>",
                "defaultValue": "(args) => ({\n  props: args\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/document-editor.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<DocumentEditorComponent>",
                "defaultValue": "(args: DocumentEditorComponent) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/filling-form.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<any>",
                "defaultValue": "(args) => ({\n  props: args\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/forms.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<any>",
                "defaultValue": "(args) => ({\n  props: args\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/review.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StoryFn<any>",
                "defaultValue": "(args) => ({\n  props: args\n})"
            }
        ],
        "functions": [
            {
                "name": "getPersonsOptions",
                "file": "src/app/filling-form.stories.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": []
            }
        ],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "projects/onlyoffice/document-editor-angular/src/lib/utils/loadScript.ts": [
                {
                    "name": "_createScriptTag",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/onlyoffice/document-editor-angular/src/lib/utils/loadScript.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(id: string, url: string, resolve: (value: unknown) => void, reject: (reason?: any) => void) => {\n  const script = document.createElement(\"script\");\n\n  script.id = id;\n  script.type = \"text/javascript\";\n  script.src = url;\n  script.async = true;\n\n  script.onload = () => {\n    // Remove attribute loading after loading is complete.\n    script.removeAttribute(\"loading\");\n    resolve(null);\n  };\n  script.onerror = (error: any) => {\n    // Remove attribute loading after loading is complete.\n    script.removeAttribute(\"loading\");\n    reject(error);\n  };\n\n  script.setAttribute(\"loading\", \"\");\n\n  return script;\n}"
                },
                {
                    "name": "loadScript",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/onlyoffice/document-editor-angular/src/lib/utils/loadScript.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "async (url: string, id: string) => {\n  return new Promise((resolve, reject) => {\n    try {\n      // If DocsAPI is defined return resolve.\n      if (window.DocsAPI) return resolve(null);\n\n      const existedScript = document.getElementById(id);\n\n      if (existedScript) {\n        // If the script element is found, wait for it to load.\n        let intervalHandler = setInterval(() => {\n          const loading = existedScript.getAttribute(\"loading\");\n          if (loading) {\n            // If the download is not completed, continue to wait.\n            return;\n          } else {\n            // If the download is completed, stop the wait.\n            clearInterval(intervalHandler);\n\n            // If DocsAPI is defined, after loading return resolve.\n            if (window.DocsAPI) return resolve(null);\n\n            // If DocsAPI is not defined, delete the existing script and create a new one.\n            const script = _createScriptTag(id, url, resolve, reject);\n            existedScript.remove();\n            document.body.appendChild(script);\n          }\n        }, 500);\n      } else {\n        // If the script element is not found, create it.\n        const script = _createScriptTag(id, url, resolve, reject);\n        document.body.appendChild(script);\n      }\n    } catch (e) {\n      console.error(e);\n    }\n  });\n}"
                }
            ],
            "src/app/comments.stories.ts": [
                {
                    "name": "CommentsTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/comments.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/comments.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<any>",
                    "defaultValue": "(args) => ({\n  props: args\n})"
                }
            ],
            "src/app/review.stories.ts": [
                {
                    "name": "CommentsTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/review.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/review.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<any>",
                    "defaultValue": "(args) => ({\n  props: args\n})"
                }
            ],
            "src/app/filling-form.stories.ts": [
                {
                    "name": "ContentControlsTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/filling-form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/filling-form.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<any>",
                    "defaultValue": "(args) => ({\n  props: args\n})"
                }
            ],
            "src/app/document-editor.stories.ts": [
                {
                    "name": "DocumentTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/document-editor.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "FormTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/document-editor.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "PresentationTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/document-editor.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "SpreadsheetTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/document-editor.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/document-editor.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<DocumentEditorComponent>",
                    "defaultValue": "(args: DocumentEditorComponent) => ({\n  props: args,\n})"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ],
            "src/app/forms.stories.ts": [
                {
                    "name": "FomsTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/forms.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/forms.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StoryFn<any>",
                    "defaultValue": "(args) => ({\n  props: args\n})"
                }
            ],
            ".storybook/preview.ts": [
                {
                    "name": "preview",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": ".storybook/preview.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Preview",
                    "defaultValue": "{\n  parameters: {\n    actions: { argTypesRegex: \"^on[A-Z].*\" },\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/,\n      },\n    },\n  },\n}"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/filling-form.stories.ts": [
                {
                    "name": "getPersonsOptions",
                    "file": "src/app/filling-form.stories.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": []
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": ".storybook/preview.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "preview",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/onlyoffice/document-editor-angular/src/lib/components/document-editor.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DocumentEditorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/41",
                "status": "low"
            },
            {
                "filePath": "projects/onlyoffice/document-editor-angular/src/lib/components/document-editor.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Window",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/onlyoffice/document-editor-angular/src/lib/model/config.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IConfig",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/onlyoffice/document-editor-angular/src/lib/utils/loadScript.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "_createScriptTag",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/onlyoffice/document-editor-angular/src/lib/utils/loadScript.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadScript",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/comments.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CommentsTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/comments.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/comments/add-comment-reply/add-comment-reply.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddCommentReplyComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/components/comments/add-comment/add-comment.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddCommentComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/comments/comments-stories/commenst-stories.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CommenstStoriesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/components/comments/comments.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CommentsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/comments/list-comments/list-comments.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ListCommentsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/comments/remove-comment-reply/remove-comment-reply.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RemoveCommentReplyComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/comments/remove-comment/remove-comment.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RemoveCommentComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/content-controls/content-controls-stories/content-controls-stories.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ContentControlsStoriesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/components/content-controls/content-controls.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ContentControlsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/components/content-controls/input-content-control/input-content-control.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputContentControlComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/components/content-controls/radio-content-control/radio-content-control.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RadioContentControlComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/components/forms/forms-stories/forms-stories.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FormsStoriesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/components/review/review-stories/review-stories.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ReviewStoriesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/review/review.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ReviewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/document-editor.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DocumentTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/document-editor.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FormTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/document-editor.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PresentationTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/document-editor.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SpreadsheetTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/document-editor.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/filling-form.stories.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getPersonsOptions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/filling-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ContentControlsTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/filling-form.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/forms.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FomsTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/forms.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/model/person.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPerson",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/review.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CommentsTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/review.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/service/forms.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FormsService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}