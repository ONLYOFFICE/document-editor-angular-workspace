{
    "pipes": [],
    "interfaces": [
        {
            "name": "IConfig",
            "id": "interface-IConfig-d4faf37ee09cb6095c9b16483bdb479ce0abad6a6cc3d3a716f1b2becaf842fe5fa2c3c22bfeb781abf77e31f43ccd90faa3310d3710de5b7918daf27e2284f4",
            "file": "projects/onlyoffice/document-editor-angular/src/lib/model/config.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IConfig {\r\n  document: {\r\n    fileType: string;\r\n    key?: string;\r\n    title: string;\r\n    permissions?: {\r\n      comment?: boolean;\r\n      download?: boolean;\r\n      edit?: boolean;\r\n      review?: boolean;\r\n    }\r\n    url: string;\r\n  }\r\n  documentType: string;\r\n  editorConfig?: {\r\n    callbackUrl?: string;\r\n    lang?: string,\r\n    mode?: string;\r\n    user?: {\r\n      id?: string;\r\n      name?: string;\r\n    }\r\n  }\r\n  height?: string;\r\n  token?: string;\r\n  type?: string;\r\n  width?: string;\r\n  events_onAppReady?: (editor: object) => void;\r\n  events_onDocumentReady?: (editor: object) => void;\r\n  events_onDocumentStateChange?: (data: object) => void;\r\n  events_onError?: (error: string) => void;\r\n}",
            "properties": [
                {
                    "name": "document",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "documentType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "editorConfig",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "events_onAppReady",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "events_onDocumentReady",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "events_onDocumentStateChange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "events_onError",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": true,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "height",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "token",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "width",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 27
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Window",
            "id": "interface-Window-70f5980c3f6ac94917a4596a26542f538a3e6d73c13e080e2ef6649b38d37ef02e8403df782bfa203b5ab1daf671e0729df63adb0c305990785f829e917cc492",
            "file": "projects/onlyoffice/document-editor-angular/src/lib/components/document-editor.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input, OnInit, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';\r\nimport { IConfig } from '../model/config';\r\nimport loadScript from \"../utils/loadScript\";\r\n\r\ndeclare global {\r\n  interface Window {\r\n      DocsAPI?: any;\r\n      DocEditor?: any;\r\n  }\r\n}\r\n\r\n@Component({\r\n  selector: 'document-editor',\r\n  template: '<div [id]=\"id\"></div>',\r\n  styles: [\r\n  ]\r\n})\r\nexport class DocumentEditorComponent implements OnInit, OnChanges, OnDestroy {\r\n  @Input() id: string;\r\n  @Input() documentServerUrl: string;\r\n  @Input() config: IConfig;\r\n\r\n  @Input() document_fileType?: string;\r\n  @Input() document_title?: string;\r\n  @Input() documentType?: string;\r\n  @Input() editorConfig_lang?: string;\r\n  @Input() height?: string;\r\n  @Input() type?: string;\r\n  @Input() width?: string;\r\n\r\n  @Input() events_onAppReady?: (editor: object) => void;\r\n  @Input() events_onDocumentReady?: (editor: object) => void;\r\n  @Input() events_onDocumentStateChange?: (data: object) => void;\r\n  @Input() events_onError?: (error: string) => void;\r\n\r\n  isFirstOnChanges: boolean = true;\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n    let url = this.documentServerUrl;\r\n    if (!url.endsWith(\"/\")) url += \"/\";\r\n\r\n    const docApiUrl = `${url}web-apps/apps/api/documents/api.js`;\r\n    loadScript(docApiUrl, \"onlyoffice-api-script\")\r\n      .then(() => this.onLoad())\r\n      .catch((err) => {\r\n        console.error(err);\r\n        this.events_onError!(err);\r\n      });\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    const listNameChanges = [\"config\", \"document_fileType\", \"document_title\", \"documentType\", \"editorConfig_lang\", \"height\", \"type\", \"width\"];\r\n\r\n    if (this.isFirstOnChanges) {\r\n      this.isFirstOnChanges = false;\r\n      return;\r\n    }\r\n\r\n    for (const name of listNameChanges) {\r\n      if (changes.hasOwnProperty(name)) {\r\n        if (window?.DocEditor?.instances[this.id]) {\r\n          window.DocEditor.instances[this.id].destroyEditor();\r\n          window.DocEditor.instances[this.id] = undefined;\r\n    \r\n          console.log(\"Important props have been changed. Load new Editor.\");\r\n          this.onLoad();\r\n          return;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (window?.DocEditor?.instances[this.id]) {\r\n      window.DocEditor.instances[this.id].destroyEditor();\r\n      window.DocEditor.instances[this.id] = undefined;\r\n    }\r\n  }\r\n\r\n  onLoad = () => {\r\n    try {\r\n      if (!window.DocsAPI) throw new Error(\"DocsAPI is not defined\");\r\n      if (window?.DocEditor?.instances[this.id]) {\r\n        console.log(\"Skip loading. Instance already exists\", this.id);\r\n        return;\r\n      }\r\n\r\n      if (!window?.DocEditor?.instances) {\r\n        window.DocEditor = { instances: {} };\r\n      }\r\n\r\n      let initConfig = Object.assign({\r\n        document: {\r\n          fileType: this.document_fileType,\r\n          title: this.document_title,\r\n        },\r\n        documentType: this.documentType,\r\n        editorConfig: {\r\n          lang: this.editorConfig_lang,\r\n        },\r\n        events: {\r\n          onAppReady: this.events_onAppReady,\r\n          onDocumentReady: this.events_onDocumentReady,\r\n          onDocumentStateChange: this.events_onDocumentStateChange,\r\n          onError: this.events_onError,\r\n        },\r\n        height: this.height,\r\n        type: this.type,\r\n        width: this.width,\r\n      }, this.config || {});\r\n\r\n      const editor = window.DocsAPI.DocEditor(this.id, initConfig);\r\n      window.DocEditor.instances[this.id] = editor;\r\n    } catch (err: any) {\r\n      console.error(err);\r\n      this.events_onError!(err);\r\n    }\r\n};\r\n}\r\n",
            "properties": [
                {
                    "name": "DocEditor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "DocsAPI",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": true,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        }
    ],
    "injectables": [],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AddCommentComponent",
            "id": "component-AddCommentComponent-b4f9dcdb1fe2644e27a8992ac7b7de2f8681bd1a4464ea5b64809f435e59af92c52e44c3670d5cc40b105c0d498233b1a3de0bb544b03238cfa8ee36edbd0b0d",
            "file": "src/app/components/comments/add-comment/add-comment.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "add-comment",
            "styleUrls": [
                "../comments.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./add-comment.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "connector",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "userName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "comment",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "addComment",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getValue",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input} from '@angular/core'\r\n\r\n@Component({\r\n  selector: 'add-comment',\r\n  templateUrl: './add-comment.component.html',\r\n  styleUrls: ['../comments.component.css']\r\n})\r\nexport class AddCommentComponent {\r\n  @Input() connector: any;\r\n  @Input() userName: string;\r\n\r\n  comment=\"\";\r\n\r\n  getValue(event: Event): string {\r\n    return (event.target as HTMLInputElement).value;\r\n  }\r\n\r\n  addComment () {\r\n    if(Boolean(this.comment)) {\r\n      var currentdate = Date.now(); \r\n      var datetime = \"\" + currentdate;\r\n\r\n      this.connector.executeMethod(\"AddComment\",[{Text: this.comment, UserName: this.userName, Time: datetime}]);\r\n      this.comment = \"\";\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "#blockComments{\r\n  margin: 5px;\r\n  display: inline-block;\r\n  width: 306px;\r\n}\r\n\r\n.comment-div {\r\n  position: relative;\r\n  border-radius: 5px;\r\n  border: 2px solid #000;\r\n  margin: 5px;\r\n  text-align: right;\r\n}\r\n\r\n.comment-span{\r\n  display: block;\r\n  margin: 3px;\r\n  text-align: left;\r\n}\r\n\r\n\r\n.comment-del-div {\r\n  position: absolute;\r\n  margin-top: 3px;\r\n  margin-right: 5px;\r\n  right: 0;\r\n} \r\n\r\n.comment-del {\r\n  display: inline-flex;\r\n  width: 1rem;\r\n  height: 1rem;\r\n  position: relative;\r\n  cursor: pointer;\r\n}\r\n\r\n.comment-del::before,\r\n.comment-del::after {\r\n  content: '';\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  width: 1rem;\r\n  height: .1rem;\r\n  background-color: #f00;\r\n  margin: -.05rem 0 0 -.4rem;\r\n  transform: rotate(-45deg);\r\n  border-radius: .1rem;\r\n}\r\n\r\n.comment-del::after {\r\n  transform: rotate(45deg);\r\n}\r\n\r\n.comment-replies{\r\n  padding-left: 24px;\r\n  margin-left: 7px;\r\n  box-sizing: border-box;\r\n  background-image: url(reply.svg);\r\n  background-size: 22px;\r\n  background-repeat: no-repeat;\r\n}\r\n\r\ntextarea {\r\n  width: 300px;\r\n  min-height: 100px;\r\n}\r\n\r\niframe {\r\n  display: inline-block;\r\n}",
                    "styleUrl": "../comments.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<div [style.textAlign]=\"'right'\">\r\n  <span [style.display]=\"'block'\" [style.textAlign]=\"'left'\">Enter your comment:</span>\r\n  <textarea [value]=\"comment\" (change)=\"comment=getValue($event)\"></textarea>\r\n\r\n  <button (click)=\"addComment()\">Send</button>\r\n</div>"
        },
        {
            "name": "AddCommentReplyComponent",
            "id": "component-AddCommentReplyComponent-ec3ec1e7fe7dc70bb53058a7df55c87bd3919d1cc6b825112dfed8a9449065ab97b61e7a2a342d4993454ee7df9bb76dbebc55b1578d893255be94fcbb08f9d1",
            "file": "src/app/components/comments/add-comment-reply/add-comment-reply.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "add-comment-reply",
            "styleUrls": [
                "../comments.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./add-comment-reply.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "comment",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "connector",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "userName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "reply",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "showAddReply",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "addReply",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getValue",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input} from '@angular/core'\r\n\r\n@Component({\r\n  selector: 'add-comment-reply',\r\n  templateUrl: './add-comment-reply.component.html',\r\n  styleUrls: ['../comments.component.css']\r\n})\r\nexport class AddCommentReplyComponent {\r\n  @Input() connector: any;\r\n  @Input() userName: string;\r\n  @Input() comment: any;\r\n\r\n  reply = \"\";\r\n  showAddReply = false;\r\n\r\n  getValue(event: Event): string {\r\n    return (event.target as HTMLInputElement).value;\r\n  }\r\n\r\n  addReply () {\r\n    if (Boolean(this.reply)) {\r\n      var currentdate = Date.now(); \r\n      var datetime = \"\" + currentdate;\r\n\r\n      this.comment[\"Data\"][\"Replies\"].push({ Text: this.reply, Time: datetime, UserName: this.userName });\r\n\r\n      this.connector.executeMethod(\"ChangeComment\", [this.comment[\"Id\"], this.comment[\"Data\"]]);\r\n\r\n      this.reply = \"\";\r\n      this.showAddReply = false;\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "#blockComments{\r\n  margin: 5px;\r\n  display: inline-block;\r\n  width: 306px;\r\n}\r\n\r\n.comment-div {\r\n  position: relative;\r\n  border-radius: 5px;\r\n  border: 2px solid #000;\r\n  margin: 5px;\r\n  text-align: right;\r\n}\r\n\r\n.comment-span{\r\n  display: block;\r\n  margin: 3px;\r\n  text-align: left;\r\n}\r\n\r\n\r\n.comment-del-div {\r\n  position: absolute;\r\n  margin-top: 3px;\r\n  margin-right: 5px;\r\n  right: 0;\r\n} \r\n\r\n.comment-del {\r\n  display: inline-flex;\r\n  width: 1rem;\r\n  height: 1rem;\r\n  position: relative;\r\n  cursor: pointer;\r\n}\r\n\r\n.comment-del::before,\r\n.comment-del::after {\r\n  content: '';\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  width: 1rem;\r\n  height: .1rem;\r\n  background-color: #f00;\r\n  margin: -.05rem 0 0 -.4rem;\r\n  transform: rotate(-45deg);\r\n  border-radius: .1rem;\r\n}\r\n\r\n.comment-del::after {\r\n  transform: rotate(45deg);\r\n}\r\n\r\n.comment-replies{\r\n  padding-left: 24px;\r\n  margin-left: 7px;\r\n  box-sizing: border-box;\r\n  background-image: url(reply.svg);\r\n  background-size: 22px;\r\n  background-repeat: no-repeat;\r\n}\r\n\r\ntextarea {\r\n  width: 300px;\r\n  min-height: 100px;\r\n}\r\n\r\niframe {\r\n  display: inline-block;\r\n}",
                    "styleUrl": "../comments.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<div *ngIf=\"showAddReply\">\r\n  <textarea [style.width]=\"'270px'\" [style.marginRight]=\"'8px'\" [value]=\"reply\" (change)=\"reply=getValue($event)\"></textarea>\r\n  <button (click)=\"addReply()\">Add</button>\r\n  <button (click)=\"showAddReply = false\">Cancel</button>\r\n</div>\r\n\r\n<button *ngIf=\"!showAddReply\" (click)=\"showAddReply = true\">Add reply</button>"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-78a182a4ae76729627b50d7bb92640727fcc4ce54a1f693d777afc7c28ea8d3b39b426700b737af8f9d1b732771e941129822519d4b35dd05103903e42e9a4c6",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "comments",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "config",
                    "defaultValue": "{\r\n    document: {\r\n        fileType: \"docx\",\r\n        title: \"demo.docx\",\r\n        url: \"http://192.168.0.169:8090/plugins/servlet/onlyoffice/file-provider?vkey=NGQ2MjJkYjY4M2U2NmFhODg2YzFhZDU1OGYyYjA3NzRhN2U5MDcyNjJmMGZmMDUzNmMxNWU3NDFlMjc1Mjk3Zj8zMjQ0MDM0\",\r\n        key: \"712027760_embedded\"\r\n    },\r\n    documentType: \"word\",\r\n    editorConfig: {\r\n      mode: \"edit\",\r\n      user: {\r\n        id: \"uid-1\",\r\n        name: \"John Smith\",\r\n        },\r\n      },\r\n    height:\"600px\",\r\n    width:\"70%\"\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IConfig",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "connector",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "onDocumentReady",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { IConfig } from '@onlyoffice/document-editor-angular';\r\nimport config from \"./../../config/config.json\";\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html'\r\n})\r\nexport class AppComponent {\r\n  comments: any[] = [];\r\n  connector: any = null;\r\n\r\n  onDocumentReady = () => {\r\n    var editor = window.DocEditor.instances[\"docxForComments\"];\r\n    this.connector = editor.createConnector();\r\n    this.connector.executeMethod(\"GetAllComments\", null, function(data: any) {\r\n      let commentsRevers: any[] = [];\r\n      for (var i = 0; i < data.length; i++){\r\n        commentsRevers[i] = data[(data.length - 1) - i];\r\n      }\r\n      this.comments = commentsRevers;\r\n    }.bind(this));\r\n  };\r\n\r\n  config: IConfig = {\r\n    document: {\r\n        fileType: \"docx\",\r\n        title: \"demo.docx\",\r\n        url: \"http://192.168.0.169:8090/plugins/servlet/onlyoffice/file-provider?vkey=NGQ2MjJkYjY4M2U2NmFhODg2YzFhZDU1OGYyYjA3NzRhN2U5MDcyNjJmMGZmMDUzNmMxNWU3NDFlMjc1Mjk3Zj8zMjQ0MDM0\",\r\n        key: \"712027760_embedded\"\r\n    },\r\n    documentType: \"word\",\r\n    editorConfig: {\r\n      mode: \"edit\",\r\n      user: {\r\n        id: \"uid-1\",\r\n        name: \"John Smith\",\r\n        },\r\n      },\r\n    height:\"600px\",\r\n    width:\"70%\"\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "templateData": "\r\n<comments userName=\"John Smith\" [comments]=\"comments\" [connector]=\"connector\"></comments>\r\n\r\n<document-editor \r\n  id=\"docxForComments\" \r\n  documentServerUrl=\"http://192.168.0.169\"\r\n  [config]=\"config\"\r\n  [events_onDocumentReady]=\"onDocumentReady\"\r\n  height=\"600px\"\r\n  width=\"70%\"\r\n></document-editor>"
        },
        {
            "name": "CommentsComponent",
            "id": "component-CommentsComponent-d639fee2e9209e3e7c7e4b0040627b94267a8618fc90fabadf5732b5cc7bbf1d6f50d5abde980b19c169e1337584ffee87e1dfeb242bbfb62b3843d1fc416dee",
            "file": "src/app/components/comments/comments.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "comments",
            "styleUrls": [
                "./comments.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./comments.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "comments",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "any[]",
                    "decorators": []
                },
                {
                    "name": "connector",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "userName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input} from '@angular/core'\r\n\r\n@Component({\r\n  selector: 'comments',\r\n  templateUrl: './comments.component.html',\r\n  styleUrls: ['./comments.component.css']\r\n})\r\nexport class CommentsComponent {\r\n  @Input() userName: string;\r\n  @Input() comments: any[];\r\n  @Input() connector: any;\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "#blockComments{\r\n  margin: 5px;\r\n  display: inline-block;\r\n  width: 306px;\r\n}\r\n\r\n.comment-div {\r\n  position: relative;\r\n  border-radius: 5px;\r\n  border: 2px solid #000;\r\n  margin: 5px;\r\n  text-align: right;\r\n}\r\n\r\n.comment-span{\r\n  display: block;\r\n  margin: 3px;\r\n  text-align: left;\r\n}\r\n\r\n\r\n.comment-del-div {\r\n  position: absolute;\r\n  margin-top: 3px;\r\n  margin-right: 5px;\r\n  right: 0;\r\n} \r\n\r\n.comment-del {\r\n  display: inline-flex;\r\n  width: 1rem;\r\n  height: 1rem;\r\n  position: relative;\r\n  cursor: pointer;\r\n}\r\n\r\n.comment-del::before,\r\n.comment-del::after {\r\n  content: '';\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  width: 1rem;\r\n  height: .1rem;\r\n  background-color: #f00;\r\n  margin: -.05rem 0 0 -.4rem;\r\n  transform: rotate(-45deg);\r\n  border-radius: .1rem;\r\n}\r\n\r\n.comment-del::after {\r\n  transform: rotate(45deg);\r\n}\r\n\r\n.comment-replies{\r\n  padding-left: 24px;\r\n  margin-left: 7px;\r\n  box-sizing: border-box;\r\n  background-image: url(reply.svg);\r\n  background-size: 22px;\r\n  background-repeat: no-repeat;\r\n}\r\n\r\ntextarea {\r\n  width: 300px;\r\n  min-height: 100px;\r\n}\r\n\r\niframe {\r\n  display: inline-block;\r\n}",
                    "styleUrl": "./comments.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<div id=\"blockComments\">\r\n  <h3 [style.textAlign]=\"'left'\">Comments</h3>\r\n  <add-comment [connector]=\"connector\" [userName]=\"userName\"></add-comment>\r\n  <list-comments [connector]=\"connector\" [userName]=\"userName\" [comments]=\"comments\"></list-comments>\r\n</div>"
        },
        {
            "name": "DocumentEditorComponent",
            "id": "component-DocumentEditorComponent-70f5980c3f6ac94917a4596a26542f538a3e6d73c13e080e2ef6649b38d37ef02e8403df782bfa203b5ab1daf671e0729df63adb0c305990785f829e917cc492",
            "file": "projects/onlyoffice/document-editor-angular/src/lib/components/document-editor.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "document-editor",
            "styleUrls": [],
            "styles": [],
            "template": "<div [id]=\"id\"></div>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "IConfig",
                    "decorators": []
                },
                {
                    "name": "document_fileType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "document_title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "documentServerUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "documentType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "editorConfig_lang",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "events_onAppReady",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "function",
                    "decorators": []
                },
                {
                    "name": "events_onDocumentReady",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "function",
                    "decorators": []
                },
                {
                    "name": "events_onDocumentStateChange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "function",
                    "decorators": []
                },
                {
                    "name": "events_onError",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "function",
                    "decorators": []
                },
                {
                    "name": "height",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "width",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isFirstOnChanges",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "onLoad",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 82
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';\r\nimport { IConfig } from '../model/config';\r\nimport loadScript from \"../utils/loadScript\";\r\n\r\ndeclare global {\r\n  interface Window {\r\n      DocsAPI?: any;\r\n      DocEditor?: any;\r\n  }\r\n}\r\n\r\n@Component({\r\n  selector: 'document-editor',\r\n  template: '<div [id]=\"id\"></div>',\r\n  styles: [\r\n  ]\r\n})\r\nexport class DocumentEditorComponent implements OnInit, OnChanges, OnDestroy {\r\n  @Input() id: string;\r\n  @Input() documentServerUrl: string;\r\n  @Input() config: IConfig;\r\n\r\n  @Input() document_fileType?: string;\r\n  @Input() document_title?: string;\r\n  @Input() documentType?: string;\r\n  @Input() editorConfig_lang?: string;\r\n  @Input() height?: string;\r\n  @Input() type?: string;\r\n  @Input() width?: string;\r\n\r\n  @Input() events_onAppReady?: (editor: object) => void;\r\n  @Input() events_onDocumentReady?: (editor: object) => void;\r\n  @Input() events_onDocumentStateChange?: (data: object) => void;\r\n  @Input() events_onError?: (error: string) => void;\r\n\r\n  isFirstOnChanges: boolean = true;\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n    let url = this.documentServerUrl;\r\n    if (!url.endsWith(\"/\")) url += \"/\";\r\n\r\n    const docApiUrl = `${url}web-apps/apps/api/documents/api.js`;\r\n    loadScript(docApiUrl, \"onlyoffice-api-script\")\r\n      .then(() => this.onLoad())\r\n      .catch((err) => {\r\n        console.error(err);\r\n        this.events_onError!(err);\r\n      });\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    const listNameChanges = [\"config\", \"document_fileType\", \"document_title\", \"documentType\", \"editorConfig_lang\", \"height\", \"type\", \"width\"];\r\n\r\n    if (this.isFirstOnChanges) {\r\n      this.isFirstOnChanges = false;\r\n      return;\r\n    }\r\n\r\n    for (const name of listNameChanges) {\r\n      if (changes.hasOwnProperty(name)) {\r\n        if (window?.DocEditor?.instances[this.id]) {\r\n          window.DocEditor.instances[this.id].destroyEditor();\r\n          window.DocEditor.instances[this.id] = undefined;\r\n    \r\n          console.log(\"Important props have been changed. Load new Editor.\");\r\n          this.onLoad();\r\n          return;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (window?.DocEditor?.instances[this.id]) {\r\n      window.DocEditor.instances[this.id].destroyEditor();\r\n      window.DocEditor.instances[this.id] = undefined;\r\n    }\r\n  }\r\n\r\n  onLoad = () => {\r\n    try {\r\n      if (!window.DocsAPI) throw new Error(\"DocsAPI is not defined\");\r\n      if (window?.DocEditor?.instances[this.id]) {\r\n        console.log(\"Skip loading. Instance already exists\", this.id);\r\n        return;\r\n      }\r\n\r\n      if (!window?.DocEditor?.instances) {\r\n        window.DocEditor = { instances: {} };\r\n      }\r\n\r\n      let initConfig = Object.assign({\r\n        document: {\r\n          fileType: this.document_fileType,\r\n          title: this.document_title,\r\n        },\r\n        documentType: this.documentType,\r\n        editorConfig: {\r\n          lang: this.editorConfig_lang,\r\n        },\r\n        events: {\r\n          onAppReady: this.events_onAppReady,\r\n          onDocumentReady: this.events_onDocumentReady,\r\n          onDocumentStateChange: this.events_onDocumentStateChange,\r\n          onError: this.events_onError,\r\n        },\r\n        height: this.height,\r\n        type: this.type,\r\n        width: this.width,\r\n      }, this.config || {});\r\n\r\n      const editor = window.DocsAPI.DocEditor(this.id, initConfig);\r\n      window.DocEditor.instances[this.id] = editor;\r\n    } catch (err: any) {\r\n      console.error(err);\r\n      this.events_onError!(err);\r\n    }\r\n};\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 36
            },
            "implements": [
                "OnInit",
                "OnChanges",
                "OnDestroy"
            ]
        },
        {
            "name": "ListCommentsComponent",
            "id": "component-ListCommentsComponent-c0617f4ec812584bd615d143d8ada4769574f481035a483c392258b7fc4c624cd9a24182128e824bef28b62ba7894b53ef7626b76cd468071262f03189e03c66",
            "file": "src/app/components/comments/list-comments/list-comments.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "list-comments",
            "styleUrls": [
                "../comments.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./list-comments.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "comments",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "any[]",
                    "decorators": []
                },
                {
                    "name": "connector",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "userName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "dateParser",
                    "args": [
                        {
                            "name": "date",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "goToComment",
                    "args": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, SimpleChanges, OnChanges} from '@angular/core'\r\n\r\n@Component({\r\n  selector: 'list-comments',\r\n  templateUrl: './list-comments.component.html',\r\n  styleUrls: ['../comments.component.css']\r\n})\r\nexport class ListCommentsComponent implements OnChanges {\r\n  @Input() connector: any;\r\n  @Input() userName: string;\r\n  @Input() comments: any[];\r\n\r\n  goToComment (e: any) {\r\n    if (e.target.parentElement.id) {\r\n      this.connector.executeMethod(\"MoveToComment\",[e.target.parentElement.id]);\r\n    }\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.hasOwnProperty(\"connector\")) {\r\n      if (this.connector) {\r\n        this.connector.attachEvent(\"onAddComment\",  function (val:any) {\r\n          console.log(\"onAddComment\");\r\n          var comments = this.comments;\r\n          var index = this.comments.findIndex((comment:any) => comment.Id === val.Id)\r\n\r\n          if (index == -1) {\r\n             this.comments = [val, ...comments];\r\n          }\r\n        }.bind(this));\r\n\r\n        this.connector.attachEvent(\"onRemoveComment\",  function (val:any) {\r\n          console.log(\"onRemoveComment\");\r\n          const index = this.comments.findIndex((comment:any) => comment.Id === val.Id);\r\n\r\n          if (index !== -1) {\r\n            this.comments.splice(index, 1);\r\n          }\r\n        }.bind(this));\r\n\r\n        this.connector.attachEvent(\"onChangeCommentData\",  function (val:any) {\r\n          const index = this.comments.findIndex((comment:any) => comment.Id === val.Id);\r\n          console.log(index);\r\n\r\n          if (index !== -1) {\r\n            this.comments[index].Data = val.Data;\r\n          }\r\n        }.bind(this));\r\n      }\r\n    }\r\n  }\r\n\r\n  dateParser(date: string) {\r\n    return new Date(parseInt(date, 10)).toLocaleString();\r\n  }\r\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "#blockComments{\r\n  margin: 5px;\r\n  display: inline-block;\r\n  width: 306px;\r\n}\r\n\r\n.comment-div {\r\n  position: relative;\r\n  border-radius: 5px;\r\n  border: 2px solid #000;\r\n  margin: 5px;\r\n  text-align: right;\r\n}\r\n\r\n.comment-span{\r\n  display: block;\r\n  margin: 3px;\r\n  text-align: left;\r\n}\r\n\r\n\r\n.comment-del-div {\r\n  position: absolute;\r\n  margin-top: 3px;\r\n  margin-right: 5px;\r\n  right: 0;\r\n} \r\n\r\n.comment-del {\r\n  display: inline-flex;\r\n  width: 1rem;\r\n  height: 1rem;\r\n  position: relative;\r\n  cursor: pointer;\r\n}\r\n\r\n.comment-del::before,\r\n.comment-del::after {\r\n  content: '';\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  width: 1rem;\r\n  height: .1rem;\r\n  background-color: #f00;\r\n  margin: -.05rem 0 0 -.4rem;\r\n  transform: rotate(-45deg);\r\n  border-radius: .1rem;\r\n}\r\n\r\n.comment-del::after {\r\n  transform: rotate(45deg);\r\n}\r\n\r\n.comment-replies{\r\n  padding-left: 24px;\r\n  margin-left: 7px;\r\n  box-sizing: border-box;\r\n  background-image: url(reply.svg);\r\n  background-size: 22px;\r\n  background-repeat: no-repeat;\r\n}\r\n\r\ntextarea {\r\n  width: 300px;\r\n  min-height: 100px;\r\n}\r\n\r\niframe {\r\n  display: inline-block;\r\n}",
                    "styleUrl": "../comments.component.css"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnChanges"
            ],
            "templateData": "<div>\r\n  <div *ngFor=\"let comment of comments\" class=\"comment-div\">\r\n    <remove-comment [connector]=\"connector\" [commentId]=\"comment['Id']\"></remove-comment>\r\n    <div [id]=\"comment['Id']\" (click)=\"goToComment($event)\">\r\n      <span class=\"comment-span\">Author: {{ comment[\"Data\"][\"UserName\"] }}</span>\r\n      <span class=\"comment-span\">Date: {{ dateParser(comment[\"Data\"][\"Time\"]) }}</span>\r\n      <span class=\"comment-span\">Message: {{ comment[\"Data\"][\"Text\"] }}</span>\r\n    </div>\r\n    <div class=\"comment-replies\">\r\n      <div *ngFor=\"let reply of comment['Data']['Replies']; let index = index\" [style.marginBottom]=\"'10px'\">\r\n        <remove-comment-reply [connector]=\"connector\" [comment]=\"comment\" [replyId]=\"index\"></remove-comment-reply>\r\n        <span class=\"comment-span\">Author: {{ reply[\"UserName\"] }}</span>\r\n        <span class=\"comment-span\">Date: {{ dateParser(reply[\"Time\"]) }}</span>\r\n        <span class=\"comment-span\">Message: {{ reply[\"Text\"] }}</span>\r\n      </div>\r\n    </div>\r\n    <add-comment-reply [connector]=\"connector\" [userName]=\"userName\" [comment]=\"comment\"></add-comment-reply>\r\n  </div>\r\n</div>"
        },
        {
            "name": "RemoveCommentComponent",
            "id": "component-RemoveCommentComponent-99cb561a7f99d1a81d1b118ba6cb9bbc7ebd48c6d8d090a4aa01e291d6c596af838a77f3626906f0390d2aabcad9eeb4d26585491d16fd853ff0120c736b335e",
            "file": "src/app/components/comments/remove-comment/remove-comment.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "remove-comment",
            "styleUrls": [
                "../comments.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./remove-comment.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "commentId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "connector",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "removeComment",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input} from '@angular/core'\r\n\r\n@Component({\r\n  selector: 'remove-comment',\r\n  templateUrl: './remove-comment.component.html',\r\n  styleUrls: ['../comments.component.css']\r\n})\r\nexport class RemoveCommentComponent {\r\n  @Input() connector: any;\r\n  @Input() commentId: string;\r\n\r\n  removeComment () {\r\n    this.connector.executeMethod(\"RemoveComments\", [[this.commentId]]);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "#blockComments{\r\n  margin: 5px;\r\n  display: inline-block;\r\n  width: 306px;\r\n}\r\n\r\n.comment-div {\r\n  position: relative;\r\n  border-radius: 5px;\r\n  border: 2px solid #000;\r\n  margin: 5px;\r\n  text-align: right;\r\n}\r\n\r\n.comment-span{\r\n  display: block;\r\n  margin: 3px;\r\n  text-align: left;\r\n}\r\n\r\n\r\n.comment-del-div {\r\n  position: absolute;\r\n  margin-top: 3px;\r\n  margin-right: 5px;\r\n  right: 0;\r\n} \r\n\r\n.comment-del {\r\n  display: inline-flex;\r\n  width: 1rem;\r\n  height: 1rem;\r\n  position: relative;\r\n  cursor: pointer;\r\n}\r\n\r\n.comment-del::before,\r\n.comment-del::after {\r\n  content: '';\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  width: 1rem;\r\n  height: .1rem;\r\n  background-color: #f00;\r\n  margin: -.05rem 0 0 -.4rem;\r\n  transform: rotate(-45deg);\r\n  border-radius: .1rem;\r\n}\r\n\r\n.comment-del::after {\r\n  transform: rotate(45deg);\r\n}\r\n\r\n.comment-replies{\r\n  padding-left: 24px;\r\n  margin-left: 7px;\r\n  box-sizing: border-box;\r\n  background-image: url(reply.svg);\r\n  background-size: 22px;\r\n  background-repeat: no-repeat;\r\n}\r\n\r\ntextarea {\r\n  width: 300px;\r\n  min-height: 100px;\r\n}\r\n\r\niframe {\r\n  display: inline-block;\r\n}",
                    "styleUrl": "../comments.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"comment-del-div\">\r\n  <span class=\"comment-del\" (click)=\"removeComment()\"></span>\r\n</div>"
        },
        {
            "name": "RemoveCommentReplyComponent",
            "id": "component-RemoveCommentReplyComponent-dcb661572bb57b349c1f5db6c4f9f04fa538f7295b898e3846ab93751ddf8b144c5ac273bcd20499c7b39c82da32e463e318b5e0ab90876fe4a7c174d71dccf4",
            "file": "src/app/components/comments/remove-comment-reply/remove-comment-reply.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "remove-comment-reply",
            "styleUrls": [
                "../comments.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./remove-comment-reply.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "comment",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "connector",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "replyId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "removeCommentReply",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input} from '@angular/core'\r\n\r\n@Component({\r\n  selector: 'remove-comment-reply',\r\n  templateUrl: './remove-comment-reply.component.html',\r\n  styleUrls: ['../comments.component.css']\r\n})\r\nexport class RemoveCommentReplyComponent {\r\n  @Input() connector: any;\r\n  @Input() comment: any;\r\n  @Input() replyId: number;\r\n\r\n  removeCommentReply () {\r\n    let commentData = this.comment[\"Data\"];\r\n    commentData[\"Replies\"].splice(this.replyId, 1);\r\n\r\n    this.connector.executeMethod(\"ChangeComment\", [this.comment[\"Id\"], commentData]);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "#blockComments{\r\n  margin: 5px;\r\n  display: inline-block;\r\n  width: 306px;\r\n}\r\n\r\n.comment-div {\r\n  position: relative;\r\n  border-radius: 5px;\r\n  border: 2px solid #000;\r\n  margin: 5px;\r\n  text-align: right;\r\n}\r\n\r\n.comment-span{\r\n  display: block;\r\n  margin: 3px;\r\n  text-align: left;\r\n}\r\n\r\n\r\n.comment-del-div {\r\n  position: absolute;\r\n  margin-top: 3px;\r\n  margin-right: 5px;\r\n  right: 0;\r\n} \r\n\r\n.comment-del {\r\n  display: inline-flex;\r\n  width: 1rem;\r\n  height: 1rem;\r\n  position: relative;\r\n  cursor: pointer;\r\n}\r\n\r\n.comment-del::before,\r\n.comment-del::after {\r\n  content: '';\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  width: 1rem;\r\n  height: .1rem;\r\n  background-color: #f00;\r\n  margin: -.05rem 0 0 -.4rem;\r\n  transform: rotate(-45deg);\r\n  border-radius: .1rem;\r\n}\r\n\r\n.comment-del::after {\r\n  transform: rotate(45deg);\r\n}\r\n\r\n.comment-replies{\r\n  padding-left: 24px;\r\n  margin-left: 7px;\r\n  box-sizing: border-box;\r\n  background-image: url(reply.svg);\r\n  background-size: 22px;\r\n  background-repeat: no-repeat;\r\n}\r\n\r\ntextarea {\r\n  width: 300px;\r\n  min-height: 100px;\r\n}\r\n\r\niframe {\r\n  display: inline-block;\r\n}",
                    "styleUrl": "../comments.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"comment-del-div\">\r\n  <span class=\"comment-del\" (click)=\"removeCommentReply()\"></span>\r\n</div>"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-ecb77688063ccbd9a05cb4c2c11f8e5709282887e89e3934d75b31e363eafe4dafa72d88707fbb2f506690eeedbe5fa7ccf8fcae2c88940c694b914fb53b453c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { DocumentEditorModule } from '@onlyoffice/document-editor-angular';\r\n\r\nimport { AppComponent } from './app.component';\r\nimport { AddCommentComponent } from './components/comments/add-comment/add-comment.component';\r\nimport { AddCommentReplyComponent } from './components/comments/add-comment-reply/add-comment-reply.component';\r\nimport { CommentsComponent } from './components/comments/comments.component';\r\nimport { ListCommentsComponent } from './components/comments/list-comments/list-comments.component';\r\nimport { RemoveCommentComponent } from './components/comments/remove-comment/remove-comment.component';\r\nimport { RemoveCommentReplyComponent } from './components/comments/remove-comment-reply/remove-comment-reply.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    CommentsComponent,\r\n    ListCommentsComponent,\r\n    AddCommentComponent,\r\n    AddCommentReplyComponent,\r\n    RemoveCommentComponent,\r\n    RemoveCommentReplyComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    DocumentEditorModule\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AddCommentComponent"
                        },
                        {
                            "name": "AddCommentReplyComponent"
                        },
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "CommentsComponent"
                        },
                        {
                            "name": "ListCommentsComponent"
                        },
                        {
                            "name": "RemoveCommentComponent"
                        },
                        {
                            "name": "RemoveCommentReplyComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "DocumentEditorModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DocumentEditorModule",
            "id": "module-DocumentEditorModule-5c158b6f4905815e565ab31846b09f9b3fb5f46faec706ed60b4da9ee8a2ba31fd73298f0b60a25db893d1c1a0a0e098c19b0493fea2ef3a5662eb6d60936cc7",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/onlyoffice/document-editor-angular/src/lib/document-editor.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { DocumentEditorComponent } from './components/document-editor.component';\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    DocumentEditorComponent\r\n  ],\r\n  imports: [\r\n  ],\r\n  exports: [\r\n    DocumentEditorComponent\r\n  ]\r\n})\r\nexport class DocumentEditorModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DocumentEditorComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "DocumentEditorComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "CommentsTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/comments.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/onlyoffice/document-editor-angular/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "DocumentTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/document-editor.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  production: true\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  production: false\r\n}"
            },
            {
                "name": "FormTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/document-editor.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "loadScript",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/onlyoffice/document-editor-angular/src/lib/utils/loadScript.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "async (url: string, id: string) => {\r\n  return new Promise((resolve, reject) => {\r\n    try {\r\n      if (document.getElementById(id)) {\r\n        if (window.DocsAPI) return resolve(null);\r\n\r\n        let intervalHandler = setInterval(() => {\r\n          if (!window.DocsAPI) return;\r\n\r\n          clearInterval(intervalHandler);\r\n\r\n          return resolve(null);\r\n        }, 500);\r\n      } else {\r\n        const script = document.createElement(\"script\");\r\n        script.setAttribute(\"type\", \"text/javascript\");\r\n        script.setAttribute(\"id\", id);\r\n\r\n        script.onload = resolve;\r\n        script.onerror = reject;\r\n\r\n        script.src = url;\r\n        script.async = true;\r\n\r\n        document.body.appendChild(script);\r\n      }\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n  });\r\n}"
            },
            {
                "name": "PresentationTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/document-editor.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/onlyoffice/document-editor-angular/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "SpreadsheetTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/document-editor.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/comments.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<any>",
                "defaultValue": "(args) => ({\r\n  props: args\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/document-editor.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<DocumentEditorComponent>",
                "defaultValue": "(args: DocumentEditorComponent) => ({\r\n  props: args,\r\n})"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/app/comments.stories.ts": [
                {
                    "name": "CommentsTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/comments.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/comments.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<any>",
                    "defaultValue": "(args) => ({\r\n  props: args\r\n})"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "projects/onlyoffice/document-editor-angular/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/onlyoffice/document-editor-angular/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/onlyoffice/document-editor-angular/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "src/app/document-editor.stories.ts": [
                {
                    "name": "DocumentTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/document-editor.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "FormTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/document-editor.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "PresentationTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/document-editor.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "SpreadsheetTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/document-editor.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/document-editor.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<DocumentEditorComponent>",
                    "defaultValue": "(args: DocumentEditorComponent) => ({\r\n  props: args,\r\n})"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  production: true\r\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  production: false\r\n}"
                }
            ],
            "projects/onlyoffice/document-editor-angular/src/lib/utils/loadScript.ts": [
                {
                    "name": "loadScript",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/onlyoffice/document-editor-angular/src/lib/utils/loadScript.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "async (url: string, id: string) => {\r\n  return new Promise((resolve, reject) => {\r\n    try {\r\n      if (document.getElementById(id)) {\r\n        if (window.DocsAPI) return resolve(null);\r\n\r\n        let intervalHandler = setInterval(() => {\r\n          if (!window.DocsAPI) return;\r\n\r\n          clearInterval(intervalHandler);\r\n\r\n          return resolve(null);\r\n        }, 500);\r\n      } else {\r\n        const script = document.createElement(\"script\");\r\n        script.setAttribute(\"type\", \"text/javascript\");\r\n        script.setAttribute(\"id\", id);\r\n\r\n        script.onload = resolve;\r\n        script.onerror = reject;\r\n\r\n        script.src = url;\r\n        script.async = true;\r\n\r\n        document.body.appendChild(script);\r\n      }\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n  });\r\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "projects/onlyoffice/document-editor-angular/src/lib/components/document-editor.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DocumentEditorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "projects/onlyoffice/document-editor-angular/src/lib/components/document-editor.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Window",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/onlyoffice/document-editor-angular/src/lib/model/config.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IConfig",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "projects/onlyoffice/document-editor-angular/src/lib/utils/loadScript.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadScript",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/onlyoffice/document-editor-angular/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/onlyoffice/document-editor-angular/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/comments.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CommentsTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/comments.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/comments/add-comment-reply/add-comment-reply.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddCommentReplyComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/components/comments/add-comment/add-comment.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddCommentComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/comments/comments.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CommentsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/comments/list-comments/list-comments.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ListCommentsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/comments/remove-comment-reply/remove-comment-reply.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RemoveCommentReplyComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/comments/remove-comment/remove-comment.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RemoveCommentComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/document-editor.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DocumentTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/document-editor.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FormTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/document-editor.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PresentationTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/document-editor.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SpreadsheetTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/document-editor.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}